{
  "version": 3,
  "file": "bundle.css",
  "sources": [
    "BarChart.svelte",
    "ColumnChart.svelte",
    "DotPlotChart.svelte",
    "LineChart.svelte",
    "ScatterChart.svelte",
    "AxisX.svelte",
    "AxisY.svelte",
    "Export.svelte",
    "Footer.svelte",
    "Labels.svelte",
    "Legend.svelte",
    "Line.svelte",
    "Title.svelte",
    "Voronoi.svelte",
    "Map.svelte",
    "MapTooltip.svelte",
    "LayerCake.svelte",
    "Html.svelte",
    "ScaledSvg.svelte",
    "Svg.svelte",
    "App.svelte",
    "Divider.svelte",
    "Filler.svelte",
    "Header.svelte",
    "Media.svelte",
    "ONSFooter.svelte",
    "ONSHeader.svelte",
    "Scroller.svelte",
    "Arrow.svelte",
    "Arrow2.svelte",
    "Em.svelte",
    "Toggle.svelte"
  ],
  "sourcesContent": [
    "<svelte:options accessors={true} />\r\n\r\n<script>\r\n\timport { LayerCake, Svg } from 'layercake';\r\n\timport { scaleBand, scaleOrdinal, scaleLinear, scaleSymlog } from 'd3-scale';\r\n  import { tweened } from 'svelte/motion';\r\n\timport { cubicInOut } from 'svelte/easing';\r\n\timport { groupData, commas } from '../js/utils';\r\n\r\n\timport SetCoords from './shared/SetCoords.svelte';\r\n\timport Bar from './shared/Bar.svelte';\r\n\timport AxisX from './shared/AxisX.svelte';\r\n\timport AxisY from './shared/AxisY.svelte';\r\n\timport Legend from './shared/Legend.svelte';\r\n\timport Title from './shared/Title.svelte';\r\n\timport Footer from './shared/Footer.svelte';\r\n\timport Export from './shared/Export.svelte';\r\n\timport Table from './shared/Table.svelte';\r\n\r\n  export let data;\r\n\texport let barHeight = 40; // height of individual bar (overridden if height is set)\r\n\texport let height = null; // number of pixels or valid css height string\r\n\texport let ssr = false;\r\n\texport let ssrWidth = 300; // for SSR only. Must be a number\r\n\texport let ssrHeight = typeof height == 'number' ? height : 300; // for SSR only. Number, or calculated from 'height'\r\n  export let animation = true;\r\n  export let duration = 800;\r\n\texport let xKey = 'x';\r\n\texport let yKey = 'y';\r\n\texport let zKey = null;\r\n\texport let idKey = yKey;\r\n\texport let xScale = 'linear';\r\n\texport let xFormatTick = commas;\r\n\texport let xMax = null;\r\n\texport let xMin = null;\r\n  export let xAxis = true;\r\n  export let yAxis = true;\r\n\texport let xTicks = 4;\r\n\texport let zDomain = null;\r\n\texport let textColor = '#666';\r\n\texport let tickColor = '#ccc';\r\n\texport let tickDashed = false;\r\n\texport let title = null;\r\n\texport let alt = null;\r\n\texport let footer = null;\r\n\texport let legend = false;\r\n\texport let snapTicks = false;\r\n\texport let mode = 'default'; // options: 'default', 'comparison', 'marker', 'stacked', 'grouped'\r\n\texport let padding = { top: 0, bottom: 20, left: 35, right: 0 };\r\n\texport let color = null;\r\n\texport let colors = color ? [color] : ['#206095', '#A8BD3A', '#003C57', '#27A0CC', '#118C7B', '#F66068', '#746CB1', '#22D0B6', 'lightgrey'];\r\n\texport let markerWidth = 2.5;\r\n\texport let spacing = 0.2; // proportion of bar width (1 = 100%)\r\n\texport let interactive = true;\r\n\texport let xPrefix = \"\";\r\n\texport let xSuffix = \"\";\r\n\texport let yPrefix = \"\";\r\n\texport let ySuffix = \"\";\r\n\texport let hover = false;\r\n\texport let hovered = null;\r\n\texport let colorHover = 'orange';\r\n\texport let select = false;\r\n\texport let selected = null;\r\n\texport let colorSelect = 'black';\r\n\texport let highlighted = [];\r\n\texport let colorHighlight = 'black';\r\n\texport let overlayFill = false;\r\n\texport let output = null;\r\n\r\n\tlet el; // Chart DOM element\r\n\r\n\tconst tweenOptions = {\r\n\t\tduration: duration,\r\n\t\teasing: cubicInOut\r\n\t};\r\n\tconst coords = tweened(undefined, tweenOptions);\r\n\r\n\tconst distinct = (d, i, arr) => arr.indexOf(d) ==  i;\r\n\r\n\tfunction getTotals(data, keys) {\r\n\t\tlet arr = [];\r\n\t\tkeys.forEach(key => {\r\n\t\t\tlet pos = 0;\r\n\t\t\tlet neg = 0;\r\n\t\t\tlet vals = data.filter(d => d[yKey] == key).map(d => d[xKey]);\r\n\t\t\tvals.forEach(d => {\r\n\t\t\t\tif (d >= 0) { pos += d } else { neg += d }; \r\n\t\t\t});\r\n\t\t\tif (pos != 0) arr.push(pos);\r\n\t\t\tif (neg != 0) arr.push(neg);\r\n\t\t});\r\n\t\treturn arr;\r\n\t}\r\n\r\n\t// Functions to update xDomain\r\n\tfunction xDomSet(data, mode, xKey, xMax) {\r\n\t\tlet vals = mode == 'stacked' && zKey ? getTotals(data, data.map(d => d[yKey]).filter(distinct)) : data.map(d => d[xKey]);\r\n\t\tlet min = xMin ? xMin : Math.min(...vals) > 0 ? 0 : Math.min(...vals);\r\n\t\tlet max = xMax ? xMax : Math.max(...vals) < 0 ? 0 : Math.max(...vals);\r\n\t\treturn [min, max];\r\n\t}\r\n\tfunction xDomUpdate(data, mode, xKey, xMax) {\r\n\t\tlet newXDom = xDomSet(data, mode, xKey, xMax);\r\n\t\tif (newXDom[0] != xDom[0] || newXDom[1] != xDom[1]) {\r\n\t\t\txDomain.set(newXDom, {duration: animation ? duration : 0});\r\n\t\t\txDom = newXDom;\r\n\t\t}\r\n\t}\r\n\tlet xDom = xDomSet(data, mode, xKey, xMax);\r\n\tconst xDomain = tweened(xDom, tweenOptions);\r\n\t$: xDomUpdate(data, mode, xKey, xMax);\r\n\r\n\t// Functions to update yDomain & zDomain\r\n\t$: yDomain = data.map(d => d[yKey]).filter(distinct);\r\n\t$: _zDomain = Array.isArray(zDomain) ? zDomain :\r\n\t\tzKey && typeof zDomain === \"function\" ? data.map(d => d[zKey]).filter(distinct).sort(zDomain) : \r\n\t\tzKey ? data.map(d => d[zKey]).filter(distinct) : null;\r\n\r\n\t// Create a data series for each zKey (group)\r\n\t$: groupedData = groupData(data, _zDomain, zKey);\r\n</script>\r\n\r\n<div bind:this={el}>\r\n{#if title}\r\n  <Title>{title}</Title>\r\n{/if}\r\n{#if alt}\r\n\t<h5 class=\"visuallyhidden\">{alt}</h5>\r\n{/if}\r\n<slot name=\"options\"/>\r\n<div class=\"chart-container\" style=\"height: {typeof height == 'number' ? `${height}px` : height ?  height : yDomain ? `${padding.top + padding.bottom + (barHeight * yDomain.length)}px` : \"300px\" }\" aria-hidden=\"true\">\r\n\t<LayerCake\r\n\t\t{padding}\r\n\t\t{ssr}\r\n\t\theight={ssr ? ssrHeight : null}\r\n\t\twidth={ssr ? ssrWidth : null}\r\n\t\tx={xKey}\r\n\t\ty={yKey}\r\n\t\tz={zKey}\r\n\t\txDomain={$xDomain}\r\n\t\t{yDomain}\r\n\t\txScale={typeof xScale == 'function' ? xScale() : xScale == 'log' ? scaleSymlog() : scaleLinear()}\r\n\t\tyScale={scaleBand().paddingInner([spacing]).round(true)}\r\n\t\tzScale={scaleOrdinal()}\r\n\t\tzDomain={_zDomain}\r\n\t\tzRange={colors}\r\n\t\tdata={groupedData}\r\n\t\tflatData={data}\r\n\t\tcustom={{\r\n\t\t\ttype: 'bar',\r\n\t\t\tmode,\r\n\t\t\tidKey,\r\n      coords,\r\n\t\t\tmarkerWidth,\r\n\t\t\tcolorSelect,\r\n\t\t\tcolorHover,\r\n\t\t\tcolorHighlight,\r\n      animation,\r\n      duration\r\n    }}\r\n\t>\r\n\t  <SetCoords/>\r\n\t  <slot name=\"back\"/>\r\n\t\t<Svg pointerEvents={interactive}>\r\n      {#if xAxis}\r\n\t\t\t  <AxisX ticks={xTicks} formatTick={xFormatTick} {snapTicks} prefix={xPrefix} suffix={xSuffix} {textColor} {tickColor} {tickDashed}/>\r\n      {/if}\r\n      {#if yAxis}\r\n\t\t\t  <AxisY gridlines={false} prefix={yPrefix} suffix={ySuffix} {textColor} {tickColor} {tickDashed}/>\r\n      {/if}\r\n\t\t\t<Bar {select} {selected} {hover} {hovered} {highlighted} on:hover on:select {overlayFill}/>\r\n\t\t\t<slot name=\"svg\"/>\r\n\t\t</Svg>\r\n\t  <slot name=\"front\"/>\r\n\t</LayerCake>\r\n</div>\r\n<div class=\"visuallyhidden\">\r\n\t<Table {data} key1={yKey} key2={xKey}/>\r\n</div>\r\n<slot name=\"legend\"/>\r\n{#if legend && _zDomain}\r\n  <Legend domain={_zDomain} {colors} {markerWidth} horizontal={false} line={mode == 'barcode'} comparison={mode == 'comparison'}/>\r\n{/if}\r\n{#if footer}\r\n  <Footer>{footer}</Footer>\r\n{/if}\r\n</div>\r\n{#if output}\r\n\t<Export {el} {data} keys={[idKey, yKey, zKey, xKey]} {title} {output}/>\r\n{/if}\r\n\r\n<style>\r\n\t.chart-container {\r\n\t\twidth: 100%;\r\n\t}\r\n\t.visuallyhidden {\r\n\t\tposition: absolute; \r\n\t\twidth: 1px; \r\n\t\theight: 1px; \r\n\t\tmargin: -1px; \r\n\t\tpadding: 0; \r\n\t\toverflow: hidden;\r\n\t\tclip: rect(0,0,0,0);  \r\n\t\tborder: 0;\r\n\t}\r\n</style>",
    "<svelte:options accessors={true} />\r\n\r\n<script>\r\n\timport { LayerCake, Svg } from 'layercake';\r\n\timport { scaleBand, scaleOrdinal, scaleLinear, scaleSymlog } from 'd3-scale';\r\n  import { tweened } from 'svelte/motion';\r\n\timport { cubicInOut } from 'svelte/easing';\r\n\timport { groupData, commas } from '../js/utils';\r\n\r\n\timport SetCoords from './shared/SetCoords.svelte';\r\n\timport Column from './shared/Column.svelte';\r\n\timport AxisX from './shared/AxisX.svelte';\r\n\timport AxisY from './shared/AxisY.svelte';\r\n\timport Legend from './shared/Legend.svelte';\r\n\timport Title from './shared/Title.svelte';\r\n\timport Footer from './shared/Footer.svelte';\r\n\timport Export from './shared/Export.svelte';\r\n\timport Table from './shared/Table.svelte';\r\n\r\n  export let data;\r\n\texport let height = 200; // number of pixels or valid css height string\r\n\texport let ssr = false;\r\n\texport let ssrWidth = 300; // for SSR only. Must be a number\r\n\texport let ssrHeight = typeof height == 'number' ? height : 200; // for SSR only. Number, or calculated from 'height'\r\n  export let animation = true;\r\n  export let duration = 800;\r\n\texport let xKey = 'x';\r\n\texport let yKey = 'y';\r\n\texport let zKey = null;\r\n\texport let idKey = xKey;\r\n\texport let yScale = 'linear';\r\n\texport let yFormatTick = commas;\r\n\texport let yMax = null;\r\n\texport let yMin = null;\r\n  export let xAxis = true;\r\n  export let yAxis = true;\r\n\texport let yTicks = 4;\r\n\texport let zDomain = null;\r\n\texport let title = null;\r\n\texport let alt = null;\r\n\texport let footer = null;\r\n\texport let legend = false;\r\n\texport let mode = 'default'; // options: 'default', 'comparison', 'marker', 'stacked', 'grouped'\r\n\texport let padding = { top: 0, bottom: 20, left: 35, right: 0 };\r\n\texport let color = null;\r\n\texport let colors = color ? [color] : ['#206095', '#A8BD3A', '#003C57', '#27A0CC', '#118C7B', '#F66068', '#746CB1', '#22D0B6', 'lightgrey'];\r\n\texport let markerWidth = 2.5\r\n\texport let spacing = 0.2 // proportion of bar width (1 = 100%)\r\n\texport let interactive = true;\r\n\texport let xPrefix = \"\";\r\n\texport let xSuffix = \"\";\r\n\texport let yPrefix = \"\";\r\n\texport let ySuffix = \"\";\r\n\texport let hover = false;\r\n\texport let hovered = null;\r\n\texport let colorHover = 'orange';\r\n\texport let select = false;\r\n\texport let selected = null;\r\n\texport let colorSelect = 'black';\r\n\texport let highlighted = [];\r\n\texport let colorHighlight = 'black';\r\n\texport let overlayFill = false;\r\n\texport let output = null;\r\n\r\n\tlet el; // Chart DOM element\r\n\r\n\tconst tweenOptions = {\r\n\t\tduration: duration,\r\n\t\teasing: cubicInOut\r\n\t};\r\n\tconst coords = tweened(undefined, tweenOptions);\r\n\r\n\tconst distinct = (d, i, arr) => arr.indexOf(d) ==  i;\r\n\r\n\tfunction getTotals(data, keys) {\r\n\t\tlet arr = [];\r\n\t\tkeys.forEach(key => {\r\n\t\t\tlet pos = 0;\r\n\t\t\tlet neg = 0;\r\n\t\t\tlet vals = data.filter(d => d[xKey] == key).map(d => d[yKey]);\r\n\t\t\tvals.forEach(d => {\r\n\t\t\t\tif (d >= 0) { pos += d } else { neg += d }; \r\n\t\t\t});\r\n\t\t\tif (pos != 0) arr.push(pos);\r\n\t\t\tif (neg != 0) arr.push(neg);\r\n\t\t});\r\n\t\treturn arr;\r\n\t}\r\n\r\n\t// Functions to animate yDomain\r\n\tfunction yDomSet(data, mode, yKey, yMax) {\r\n\t\tlet vals = mode == 'stacked' && zKey ? getTotals(data, data.map(d => d[xKey]).filter(distinct)) : data.map(d => d[yKey]);\r\n\t\tlet min = yMin ? yMin : Math.min(...vals) > 0 ? 0 : Math.min(...vals);\r\n\t\tlet max = yMax ? yMax : Math.max(...vals) < 0 ? 0 : Math.max(...vals);\r\n\t\treturn [min, max];\r\n\t}\r\n\tfunction yDomUpdate(data, mode, yKey, yMax) {\r\n\t\tlet newYDom = yDomSet(data, mode, yKey, yMax);\r\n\t\tif (newYDom[0] != yDom[0] || newYDom[1] != yDom[1]) {\r\n\t\t\tyDomain.set(newYDom, {duration: animation ? duration : 0});\r\n\t\t\tyDom = newYDom;\r\n\t\t}\r\n\t}\r\n\tlet yDom = yDomSet(data, mode, yKey, yMax);\r\n\tconst yDomain = tweened(yDom, tweenOptions);\r\n\t$: yDomUpdate(data, mode, yKey, yMax);\r\n\r\n\t// Functions to update xDomain & zDomain\r\n\t$: xDomain = data.map(d => d[xKey]).filter(distinct);\r\n\t$: _zDomain = Array.isArray(zDomain) ? zDomain :\r\n\t\tzKey && typeof zDomain === \"function\" ? data.map(d => d[zKey]).filter(distinct).sort(zDomain) : \r\n\t\tzKey ? data.map(d => d[zKey]).filter(distinct) : null;\r\n\t\r\n\t// Create a data series for each zKey (group)\r\n\t$: groupedData = groupData(data, _zDomain, zKey);\r\n</script>\r\n\r\n<div bind:this={el}>\r\n{#if title}\r\n  <Title>{title}</Title>\r\n{/if}\r\n{#if alt}\r\n\t<h5 class=\"visuallyhidden\">{alt}</h5>\r\n{/if}\r\n<slot name=\"options\"/>\r\n<div class=\"chart-container\" style=\"height: {typeof height == 'number' ? height + 'px' : height }\" aria-hidden=\"true\">\r\n\t<LayerCake\r\n\t\t{padding}\r\n\t\t{ssr}\r\n\t\theight={ssr ? ssrHeight : null}\r\n\t\twidth={ssr ? ssrWidth : null}\r\n\t\tx={xKey}\r\n\t\ty={yKey}\r\n\t\tz={zKey}\r\n\t\t{xDomain}\r\n\t\tyDomain={$yDomain}\r\n\t\tzDomain={_zDomain}\r\n\t\txScale={scaleBand().paddingInner([spacing]).round(true)}\r\n\t\tyScale={typeof yScale == 'function' ? yScale() : yScale == 'log' ? scaleSymlog() : scaleLinear()}\r\n\t\tzScale={scaleOrdinal()}\r\n\t\tzRange={colors}\r\n\t\tdata={groupedData}\r\n\t\tflatData={data}\r\n\t\tcustom={{\r\n\t\t\ttype: 'column',\r\n\t\t\tmode,\r\n\t\t\tidKey,\r\n      coords,\r\n\t\t\tmarkerWidth,\r\n\t\t\tcolorSelect,\r\n\t\t\tcolorHover,\r\n\t\t\tcolorHighlight,\r\n      animation,\r\n      duration\r\n    }}\r\n\t>\r\n\t\t<SetCoords/>\r\n\t  <slot name=\"back\"/>\r\n\t\t<Svg pointerEvents={interactive}>\r\n      {#if xAxis}\r\n\t\t\t  <AxisX gridlines={false} prefix={xPrefix} suffix={xSuffix}/>\r\n      {/if}\r\n      {#if yAxis}\r\n\t\t\t  <AxisY ticks={yTicks} formatTick={yFormatTick} prefix={yPrefix} suffix={ySuffix}/>\r\n      {/if}\r\n\t\t\t<Column {select} {selected} {hover} {hovered} {highlighted} on:hover on:select {overlayFill}/>\r\n\t\t\t<slot name=\"svg\"/>\r\n\t\t</Svg>\r\n\t  <slot name=\"front\"/>\r\n\t</LayerCake>\r\n</div>\r\n<div class=\"visuallyhidden\">\r\n\t<Table {data} key1={xKey} key2={yKey}/>\r\n</div>\r\n<slot name=\"legend\"/>\r\n{#if legend && _zDomain}\r\n  <Legend domain={_zDomain} {colors} {markerWidth} line={mode == 'barcode'} comparison={mode == 'comparison'}/>\r\n{/if}\r\n{#if footer}\r\n  <Footer>{footer}</Footer>\r\n{/if}\r\n</div>\r\n{#if output}\r\n\t<Export {el} {data} keys={[idKey, xKey, zKey, yKey]} {title} {output}/>\r\n{/if}\r\n\r\n<style>\r\n\t.chart-container {\r\n\t\twidth: 100%;\r\n\t}\r\n\t.visuallyhidden {\r\n\t\tposition: absolute; \r\n\t\twidth: 1px; \r\n\t\theight: 1px; \r\n\t\tmargin: -1px; \r\n\t\tpadding: 0; \r\n\t\toverflow: hidden;\r\n\t\tclip: rect(0,0,0,0);  \r\n\t\tborder: 0;\r\n\t}\r\n</style>",
    "<svelte:options accessors={true} />\r\n\r\n<script>\r\n\timport { LayerCake, Svg } from 'layercake';\r\n\timport { scaleBand, scaleOrdinal, scaleLinear, scaleSymlog } from 'd3-scale';\r\n  import { tweened } from 'svelte/motion';\r\n\timport { cubicInOut } from 'svelte/easing';\r\n\timport { groupData, commas } from '../js/utils';\r\n\r\n\timport SetCoords from './shared/SetCoords.svelte';\r\n\timport DotPlot from './shared/DotPlot.svelte';\r\n\timport AxisX from './shared/AxisX.svelte';\r\n\timport AxisY from './shared/AxisY.svelte';\r\n\timport Legend from './shared/Legend.svelte';\r\n\timport Title from './shared/Title.svelte';\r\n\timport Footer from './shared/Footer.svelte';\r\n\timport Export from './shared/Export.svelte';\r\n\timport Table from './shared/Table.svelte';\r\n\r\n  export let data;\r\n\texport let barHeight = 40; // height of individual bar (overridden if height is set)\r\n\texport let height = null; // number of pixels or valid css height string\r\n\texport let ssr = false;\r\n\texport let ssrWidth = 300; // for SSR only. Must be a number\r\n\texport let ssrHeight = typeof height == 'number' ? height : 200; // for SSR only. Number, or calculated from 'height'\r\n  export let animation = true;\r\n  export let duration = 800;\r\n\texport let xKey = 'x';\r\n\texport let yKey = 'y';\r\n\texport let zKey = null;\r\n\texport let idKey = yKey;\r\n\texport let xScale = 'linear';\r\n\texport let xFormatTick = commas;\r\n\texport let xMax = null;\r\n\texport let xMin = null;\r\n  export let xAxis = true;\r\n  export let yAxis = true;\r\n\texport let xTicks = 4; // Number of ticks or array of tick values, eg [0, 10, 100, 1000]\r\n\texport let zDomain = null;\r\n\texport let textColor = '#666';\r\n\texport let tickColor = '#ccc';\r\n\texport let tickDashed = false;\r\n\texport let title = null;\r\n\texport let alt = null;\r\n\texport let footer = null;\r\n\texport let legend = false;\r\n\texport let snapTicks = false;\r\n\texport let mode = 'default'; // No other options at present\r\n\texport let padding = { top: 0, bottom: 20, left: 35, right: 0 };\r\n\texport let color = null; // Option to set a single colour\r\n\texport let colors = color ? [color] : ['#206095', '#A8BD3A', '#003C57', '#27A0CC', '#118C7B', '#F66068', '#746CB1', '#22D0B6', 'lightgrey'];\r\n  export let radius = 6;\r\n\texport let lineWidth = 2.5;\r\n  export let lineColor = 'darkgrey';\r\n\texport let interactive = true;\r\n\texport let xPrefix = \"\";\r\n\texport let xSuffix = \"\";\r\n\texport let yPrefix = \"\";\r\n\texport let ySuffix = \"\";\r\n\texport let hover = false;\r\n\texport let hovered = null; // idKey of hovered item(s)\r\n\texport let colorHover = 'orange';\r\n\texport let select = false; // idKey of selected item(s)\r\n\texport let selected = null;\r\n\texport let colorSelect = 'black';\r\n\texport let highlighted = []; // Array of idKeys to highlight multiple items\r\n\texport let colorHighlight = 'black';\r\n\texport let overlayFill = false;\r\n\texport let output = null;\r\n\r\n\tlet el; // Chart DOM element\r\n\r\n\tconst tweenOptions = {\r\n\t\tduration: duration,\r\n\t\teasing: cubicInOut\r\n\t};\r\n\tconst coords = tweened(undefined, tweenOptions);\r\n\r\n\tconst distinct = (d, i, arr) => arr.indexOf(d) ==  i;\r\n\r\n\t// Functions to update xDomain\r\n\tfunction xDomSet(data, mode, xKey, xMax) {\r\n\t\tlet vals = data.map(d => d[xKey]);\r\n\t\tlet min = xMin ? xMin : Math.min(...vals) > 0 ? 0 : Math.min(...vals);\r\n\t\tlet max = xMax ? xMax : Math.max(...vals) < 0 ? 0 : Math.max(...vals);\r\n\t\treturn [min, max];\r\n\t}\r\n\tfunction xDomUpdate(data, mode, xKey, xMax) {\r\n\t\tlet newXDom = xDomSet(data, mode, xKey, xMax);\r\n\t\tif (newXDom[0] != xDom[0] || newXDom[1] != xDom[1]) {\r\n\t\t\txDomain.set(newXDom, {duration: animation ? duration : 0});\r\n\t\t\txDom = newXDom;\r\n\t\t}\r\n\t}\r\n\tlet xDom = xDomSet(data, mode, xKey, xMax);\r\n\tconst xDomain = tweened(xDom, tweenOptions);\r\n\t$: xDomUpdate(data, mode, xKey, xMax);\r\n\r\n\t// Functions to update yDomain & zDomain\r\n\t$: yDomain = data.map(d => d[yKey]).filter(distinct);\r\n\t$: _zDomain = Array.isArray(zDomain) ? zDomain :\r\n\t\tzKey && typeof zDomain === \"function\" ? data.map(d => d[zKey]).filter(distinct).sort(zDomain) : \r\n\t\tzKey ? data.map(d => d[zKey]).filter(distinct) : null;\r\n\t\r\n\t// Create a data series for each yKey\r\n\t$: groupedData = groupData(data, yDomain, yKey);\r\n</script>\r\n\r\n<div bind:this={el}>\r\n{#if title}\r\n  <Title>{title}</Title>\r\n{/if}\r\n{#if alt}\r\n\t<h5 class=\"visuallyhidden\">{alt}</h5>\r\n{/if}\r\n<slot name=\"options\"/>\r\n<div class=\"chart-container\" style=\"height: {typeof height == 'number' ? `${height}px` : height ?  height : yDomain ? `${padding.top + padding.bottom + (barHeight * yDomain.length)}px` : \"300px\" }\" aria-hidden=\"true\">\r\n\t<LayerCake\r\n\t\t{padding}\r\n\t\t{ssr}\r\n\t\theight={ssr ? ssrHeight : null}\r\n\t\twidth={ssr ? ssrWidth : null}\r\n\t\tx={xKey}\r\n\t\ty={yKey}\r\n\t\tz={zKey}\r\n\t\txDomain={$xDomain}\r\n\t\t{yDomain}\r\n\t\txScale={typeof xScale == 'function' ? xScale() : xScale == 'log' ? scaleSymlog() : scaleLinear()}\r\n    yScale={scaleBand().paddingInner([0.05]).round(true)}\r\n\t\tzScale={scaleOrdinal()}\r\n\t\tzDomain={_zDomain}\r\n\t\tzRange={colors}\r\n\t\tdata={groupedData}\r\n\t\tflatData={data}\r\n\t\tcustom={{\r\n\t\t\ttype: 'dotplot',\r\n\t\t\tmode,\r\n\t\t\tidKey,\r\n      coords,\r\n      radius,\r\n\t\t\tlineWidth,\r\n      lineColor,\r\n\t\t\tcolorSelect,\r\n\t\t\tcolorHover,\r\n\t\t\tcolorHighlight,\r\n      animation,\r\n      duration\r\n    }}\r\n\t>\r\n\t  <SetCoords/>\r\n\t  <slot name=\"back\"/>\r\n\t\t<Svg pointerEvents={interactive}>\r\n      {#if xAxis}\r\n\t\t\t  <AxisX ticks={xTicks} formatTick={xFormatTick} {snapTicks} prefix={xPrefix} suffix={xSuffix} {textColor} {tickColor} {tickDashed}/>\r\n      {/if}\r\n      {#if yAxis}\r\n\t\t\t  <AxisY gridlines={false} prefix={yPrefix} suffix={ySuffix} {textColor} {tickColor} {tickDashed}/>\r\n      {/if}\r\n\t\t\t<DotPlot {select} {selected} {hover} {hovered} {highlighted} on:hover on:select {overlayFill}/>\r\n\t\t\t<slot name=\"svg\"/>\r\n\t\t</Svg>\r\n\t  <slot name=\"front\"/>\r\n\t</LayerCake>\r\n</div>\r\n<div class=\"visuallyhidden\">\r\n\t<Table {data} key1={yKey} key2={xKey}/>\r\n</div>\r\n<slot name=\"legend\"/>\r\n{#if false && legend && _zDomain}\r\n  <Legend domain={_zDomain} {colors} horizontal={false} line={mode == 'barcode'} comparison={mode == 'comparison'}/>\r\n{/if}\r\n{#if footer}\r\n  <Footer>{footer}</Footer>\r\n{/if}\r\n</div>\r\n{#if output}\r\n\t<Export {el} {data} keys={[idKey, xKey, zKey, yKey]} {title} {output}/>\r\n{/if}\r\n\r\n<style>\r\n\t.chart-container {\r\n\t\twidth: 100%;\r\n\t}\r\n\t.visuallyhidden {\r\n\t\tposition: absolute; \r\n\t\twidth: 1px; \r\n\t\theight: 1px; \r\n\t\tmargin: -1px; \r\n\t\tpadding: 0; \r\n\t\toverflow: hidden;\r\n\t\tclip: rect(0,0,0,0);  \r\n\t\tborder: 0;\r\n\t}\r\n</style>",
    "<svelte:options accessors={true} />\r\n\r\n<script>\r\n\timport { LayerCake, Svg } from 'layercake';\r\n\timport { scaleOrdinal, scaleLinear, scaleSymlog, scaleTime } from 'd3-scale';\r\n \timport { tweened } from 'svelte/motion';\r\n\timport { cubicInOut } from 'svelte/easing';\r\n\timport { groupData, stackData, commas } from '../js/utils';\r\n\r\n\timport SetCoords from './shared/SetCoords.svelte';\r\n\timport Line from './shared/Line.svelte';\r\n\timport Area from './shared/Area.svelte';\r\n\timport AxisX from './shared/AxisX.svelte';\r\n\timport AxisY from './shared/AxisY.svelte';\r\n\timport Legend from './shared/Legend.svelte';\r\n\timport Title from './shared/Title.svelte';\r\n\timport Footer from './shared/Footer.svelte';\r\n\timport Labels from './shared/Labels.svelte';\r\n\timport Export from './shared/Export.svelte';\r\n\timport Table from './shared/Table.svelte';\r\n\r\n  export let data;\r\n\texport let height = 200; // number of pixels or valid css height string\r\n\texport let ssr = false;\r\n\texport let ssrWidth = 300; // for SSR only. Must be a number\r\n\texport let ssrHeight = typeof height == 'number' ? height : 200; // for SSR only. Number, or calculated from 'height'\r\n\texport let animation = true;\r\n\texport let duration = 800;\r\n\texport let xKey = 'x';\r\n\texport let yKey = 'y';\r\n\texport let zKey = null;\r\n\texport let idKey = zKey;\r\n\texport let labelKey = idKey;\r\n\texport let xScale;\r\n\texport let yScale = 'linear';\r\n\texport let yFormatTick = commas;\r\n\texport let xFormatTick = d => d;\r\n\texport let yMax = null;\r\n\texport let yMin = 0;\r\n\texport let xAxis = true;\r\n\texport let yAxis = true;\r\n\texport let xTicks = 4;\r\n\texport let yTicks = 4;\r\n\texport let zDomain = null;\r\n\texport let title = null;\r\n\texport let alt = null;\r\n\texport let footer = null;\r\n\texport let legend = false;\r\n\texport let labels = false;\r\n\texport let snapTicks = true;\r\n\texport let line = true;\r\n\texport let area = true;\r\n\texport let mode = 'default';\r\n\texport let areaOpacity = 1;\r\n\texport let padding = { top: 0, bottom: 20, left: 35, right: 0 };\r\n\texport let color = null;\r\n\texport let colors = color ? [color] : ['#206095', '#A8BD3A', '#003C57', '#27A0CC', '#118C7B', '#F66068', '#746CB1', '#22D0B6', 'lightgrey'];\r\n\texport let lineWidth = 2.5;\r\n\texport let interactive = true;\r\n\texport let xPrefix = \"\";\r\n\texport let xSuffix = \"\";\r\n\texport let yPrefix = \"\";\r\n\texport let ySuffix = \"\";\r\n\texport let hover = false;\r\n\texport let hovered = null;\r\n\texport let colorHover = 'orange';\r\n\texport let select = false;\r\n\texport let selected = null;\r\n\texport let colorSelect = '#206095';\r\n\texport let highlighted = [];\r\n\texport let colorHighlight = '#206095';\r\n\texport let output = null;\r\n\r\n\tlet el; // Chart DOM element\r\n\r\n\tconst tweenOptions = {\r\n\t\tduration: duration,\r\n\t\teasing: cubicInOut\r\n\t};\r\n\tconst coords = tweened(undefined, tweenOptions);\r\n\r\n\tconst distinct = (d, i, arr) => arr.indexOf(d) ==  i;\r\n\tconst distinctTime = (d, i, arr) => arr.map(e=>e.getTime).indexOf(d.getTime())\r\n\r\n\tfunction getTotals(data, keys) {\r\n\t\tlet arr = [];\r\n\t\tkeys.forEach(key => {\r\n\t\t\tlet vals = data.filter(d => d[xKey] == key).map(d => d[yKey]);\r\n\t\t\tlet sum = vals.reduce((acc, curr) => acc + curr);\r\n\t\t\tarr.push(sum);\r\n\t\t});\r\n\t\treturn arr;\r\n\t}\r\n\r\n\t// Functions to animate yDomain\r\n\tconst yDomSet = (data, mode, yKey, yMax) => yMax ? [yMin, yMax] : mode == 'stacked' && yKey ? [yMin, Math.max(...getTotals(data, data.map(d => d[xKey]).filter(distinct)))] : [yMin, Math.max(...data.map(d => d[yKey]))];\r\n\tfunction yDomUpdate(data, mode, yKey, yMax) {\r\n\t\tlet newYDom = yDomSet(data, mode, yKey, yMax);\r\n\t\tif (newYDom[0] != yDom[0] || newYDom[1] != yDom[1]) {\r\n\t\t\tyDomain.set(newYDom, {duration: animation ? duration : 0});\r\n\t\t\tyDom = newYDom;\r\n\t\t}\r\n\t\r\n\r\n\t}\r\n\tlet yDom = yDomSet(data, mode, yKey, yMax);\r\n\tconst yDomain = tweened(yDom, tweenOptions);\r\n\r\n\r\n\r\n\t$: yDomUpdate(data, mode, yKey, yMax);\r\n\t\r\n\t// Function to update zDomain\r\n\t$: _zDomain = Array.isArray(zDomain) ? zDomain :\r\n\t\tzKey && typeof zDomain === \"function\" ? data.map(d => d[zKey]).filter(distinct).sort(zDomain) : \r\n\t\tzKey ? data.map(d => d[zKey]).filter(distinct) : null;\r\n\r\n\t// Create a data series for each zKey (group)\r\n\t$: groupedData = mode == 'stacked' ? stackData(data, _zDomain, yKey, zKey) : groupData(data, _zDomain, zKey);\r\n</script>\r\n\r\n<div bind:this={el}>\r\n{#if title}\r\n  <Title>{title}</Title>\r\n{/if}\r\n{#if alt}\r\n\t<h5 class=\"visuallyhidden\">{alt}</h5>\r\n{/if}\r\n<slot name=\"options\"/>\r\n<div class=\"chart-container\" style=\"height: {typeof height == 'number' ? height + 'px' : height }\" aria-hidden=\"true\">\r\n\t<LayerCake\r\n\t\t{padding}\r\n\t\t{ssr}\r\n\t\theight={ssr ? ssrHeight : null}\r\n\t\twidth={ssr ? ssrWidth : null}\r\n\t\tx={xKey}\r\n\t\ty={yKey}\r\n\t\tz={zKey}\r\n\t\tyDomain={$yDomain}\r\n\t\txScale={typeof xScale == 'function' ? xScale() : xScale == 'time' ? scaleTime() : scaleLinear()}\r\n\t\tyScale={typeof yScale == 'function' ? yScale() : yScale == 'log' ? scaleSymlog() : scaleLinear()}\r\n\t\tzScale={scaleOrdinal()}\r\n\t\tzDomain={_zDomain}\r\n\t\tzRange={colors}\r\n\t\tdata={groupedData}\r\n\t\tflatData={data}\r\n\t\tcustom={{\r\n\t\t\ttype: 'line',\r\n\t\t\tmode,\r\n\t\t\tidKey,\r\n\t\t\tlabelKey,\r\n\t\t\tcoords,\r\n\t\t\tcolorSelect,\r\n\t\t\tcolorHover,\r\n\t\t\tcolorHighlight,\r\n      animation,\r\n      duration\r\n    }}\r\n\t>\r\n\t\t<SetCoords/>\r\n\t  <slot name=\"back\"/>\r\n\t\t<Svg pointerEvents={interactive}>\r\n      {#if xAxis}\r\n\t\t\t  <AxisX ticks={xTicks} formatTick={xFormatTick} {snapTicks} prefix={xPrefix} suffix={xSuffix}/>\r\n      {/if}\r\n      {#if yAxis}\r\n\t\t\t  <AxisY ticks={yTicks} formatTick={yFormatTick} prefix={yPrefix} suffix={ySuffix}/>\r\n      {/if}\r\n      {#if area}\r\n\t\t\t  <Area {mode} opacity={areaOpacity}/>\r\n      {/if}\r\n      {#if line}\r\n\t\t\t  <Line {lineWidth} {select} bind:selected {hover} bind:hovered {highlighted} on:hover on:select/>\r\n      {/if}\r\n\t\t\t{#if labels}\r\n\t\t\t\t<Labels {hovered} {selected}/>\r\n\t\t\t{/if}\r\n\t\t\t<slot name=\"svg\"/>\r\n\t\t</Svg>\r\n\t  <slot name=\"front\"/>\r\n\t</LayerCake>\r\n</div>\r\n<div class=\"visuallyhidden\">\r\n\t<Table {data} key1={zKey} key2={xKey} key3={yKey}/>\r\n</div>\r\n<slot name=\"legend\"/>\r\n{#if legend && _zDomain}\r\n  <Legend domain={_zDomain} {colors} {line} markerWidth={lineWidth}/>\r\n{/if}\r\n{#if footer}\r\n  <Footer>{footer}</Footer>\r\n{/if}\r\n</div>\r\n{#if output}\r\n\t<Export {el} {data} keys={[idKey, xKey, zKey, yKey]} {title} {output}/>\r\n{/if}\r\n\r\n<style>\r\n\t.chart-container {\r\n\t\twidth: 100%;\r\n\t}\r\n\t.visuallyhidden {\r\n\t\tposition: absolute; \r\n\t\twidth: 1px; \r\n\t\theight: 1px; \r\n\t\tmargin: -1px; \r\n\t\tpadding: 0; \r\n\t\toverflow: hidden;\r\n\t\tclip: rect(0,0,0,0);  \r\n\t\tborder: 0;\r\n\t}\r\n</style>",
    "<svelte:options accessors={true} />\r\n\r\n<script>\t\r\n\timport { LayerCake, Svg } from 'layercake';\r\n\timport { scaleOrdinal, scaleLinear, scaleSymlog } from 'd3-scale';\r\n  import { tweened } from 'svelte/motion';\r\n\timport { cubicInOut } from 'svelte/easing';\r\n\timport { commas } from '../js/utils';\r\n\r\n\timport SetCoords from './shared/SetCoords.svelte';\r\n\timport Scatter from './shared/Scatter.svg.svelte';\r\n\timport Voronoi from './shared/Voronoi.svelte';\r\n\timport AxisX from './shared/AxisX.svelte';\r\n\timport AxisY from './shared/AxisY.svelte';\r\n\timport Legend from './shared/Legend.svelte';\r\n\timport Title from './shared/Title.svelte';\r\n\timport Footer from './shared/Footer.svelte';\r\n\timport Labels from './shared/Labels.svelte';\r\n\timport Export from './shared/Export.svelte';\r\n\timport Table from './shared/Table.svelte';\r\n\r\n\texport let data;\r\n\texport let height = 200; // number of pixels or valid css height string\r\n\texport let ssr = false;\r\n\texport let ssrWidth = 300; // for SSR only. Must be a number\r\n\texport let ssrHeight = typeof height == 'number' ? height : 200; // for SSR only. Number, or calculated from 'height'\r\n  export let animation = true;\r\n  export let duration = 800;\r\n\texport let xKey = 'x';\r\n\texport let yKey = null;\r\n\texport let zKey = null;\r\n  export let rKey = null;\r\n\texport let idKey = xKey;\r\n\texport let labelKey = idKey;\r\n\texport let xScale = 'linear';\r\n\texport let yScale = 'linear';\r\n\texport let xFormatTick = commas;\r\n\texport let yFormatTick = commas;\r\n\texport let xMax = null;\r\n\texport let xMin = null;\r\n\texport let yMax = null;\r\n\texport let yMin = null;\r\n  export let xAxis = true;\r\n  export let yAxis = true;\r\n\texport let xTicks = 4;\r\n  export let yTicks = 4;\r\n\texport let zDomain = null;\r\n\texport let textColor = '#666';\r\n\texport let tickColor = '#ccc';\r\n\texport let tickDashed = false;\r\n\texport let title = null;\r\n\texport let alt = null;\r\n\texport let footer = null;\r\n\texport let legend = false;\r\n\texport let labels = false;\r\n\texport let labelContent = null;\r\n\texport let snapTicks = false;\r\n  export let padding = { top: 0, bottom: 20, left: 35, right: 0 };\r\n  export let buffer = 5;\r\n\texport let color = null;\r\n\texport let colors = color ? [color] : ['#206095', '#A8BD3A', '#003C57', '#27A0CC', '#118C7B', '#F66068', '#746CB1', '#22D0B6', 'lightgrey'];\r\n\texport let r = 4;\r\n\texport let interactive = true;\r\n\texport let xPrefix = \"\";\r\n\texport let xSuffix = \"\";\r\n\texport let yPrefix = \"\";\r\n\texport let ySuffix = \"\";\r\n\texport let hover = false;\r\n\texport let hovered = null;\r\n\texport let colorHover = 'orange';\r\n\texport let select = false;\r\n\texport let selected = null;\r\n\texport let colorSelect = 'black';\r\n\texport let highlighted = [];\r\n\texport let colorHighlight = 'black';\r\n\texport let overlayFill = false;\r\n\texport let output = null;\r\n\r\n\tlet el; // Chart DOM element\r\n\r\n\tconst tweenOptions = {\r\n\t\tduration: duration,\r\n\t\teasing: cubicInOut\r\n\t};\r\n\tconst coords = tweened(undefined, tweenOptions);\r\n  \r\n  const distinct = (d, i, arr) => arr.indexOf(d) ==  i;\r\n\r\n\tfunction domGet(data, key, min, max) {\r\n\t\tlet vals = data.map(d => d[key]);\r\n\t\treturn [min ? min : vals[0] ? Math.min(...vals) : -1, max ? max : vals[0] ? Math.max(...vals) : 1];\r\n\t}\r\n\tfunction xDomUpdate(data, key, min, max) {\r\n\t\tlet newDom = domGet(data, key, min, max);\r\n\t\tif (newDom[0] != xDom[0] || newDom[1] != xDom[1]) {\r\n\t\t\txDomain.set(newDom);\r\n\t\t\txDom = newDom;\r\n\t\t}\r\n\t}\r\n\tfunction yDomUpdate(data, key, min, max) {\r\n\t\tlet newDom = key ? domGet(data, key, min, max) : yDom;\r\n\t\tif (newDom[0] != yDom[0] || newDom[1] != yDom[1]) {\r\n\t\t\tyDomain.set(newDom, {duration: animation ? duration : 0});\r\n\t\t\tyDom = newDom;\r\n\t\t}\r\n\t}\r\n\tlet xDom = domGet(data, xKey, xMin, xMax);\r\n\tconst xDomain = tweened(xDom, tweenOptions);\r\n\tlet yDom = domGet(data, yKey, yMin, yMax);\r\n\tconst yDomain = tweened(yDom, tweenOptions);\r\n\r\n\t$: xDomUpdate(data, xKey, xMin, xMax);\r\n\t$: yDomUpdate(data, yKey, yMin, yMax);\r\n  $: _zDomain = Array.isArray(zDomain) ? zDomain :\r\n\t\tzKey && typeof zDomain === \"function\" ? data.map(d => d[zKey]).filter(distinct).sort(zDomain) : \r\n\t\tzKey ? data.map(d => d[zKey]).filter(distinct) : null;\r\n</script>\r\n\r\n<div bind:this={el}>\r\n{#if title}\r\n  <Title>{title}</Title>\r\n{/if}\r\n{#if alt}\r\n\t<h5 class=\"visuallyhidden\">{alt}</h5>\r\n{/if}\r\n<slot name=\"options\"/>\r\n<div class=\"chart-container\" style=\"height: {typeof height == 'number' ? height + 'px' : height }\" aria-hidden=\"true\">\r\n\t<LayerCake\r\n    {padding}\r\n\t\t{ssr}\r\n\t\theight={ssr ? ssrHeight : null}\r\n\t\twidth={ssr ? ssrWidth : null}\r\n\t\tx={xKey}\r\n\t\ty={yKey}\r\n    z={zKey}\r\n    r={rKey}\r\n\t\txScale={typeof xScale == 'function' ? xScale() : xScale == 'log' ? scaleSymlog() : scaleLinear()}\r\n\t\tyScale={typeof yScale == 'function' ? yScale() : yScale == 'log' ? scaleSymlog() : scaleLinear()}\r\n    zScale={scaleOrdinal()}\r\n\t\txDomain={$xDomain}\r\n\t\tyDomain={$yDomain}\r\n\t\tzDomain={_zDomain}\r\n\t\tzRange={colors}\r\n    rRange={Array.isArray(r) ? r : [r, r]}\r\n\t\tdata={data}\r\n    xPadding={[buffer, buffer]}\r\n    yPadding={yKey ? [buffer, buffer] : null}\r\n    custom={{\r\n\t\t\ttype: 'scatter',\r\n\t\t\tidKey,\r\n\t\t\tlabelKey,\r\n      coords,\r\n\t\t\tcolorSelect,\r\n\t\t\tcolorHover,\r\n\t\t\tcolorHighlight,\r\n\t\t\tpadding: 1,\r\n      animation,\r\n      duration\r\n    }}\r\n\t>\r\n\t  <SetCoords/>\r\n    <slot name=\"back\"/>\r\n\t\t<Svg pointerEvents={interactive}>\r\n      {#if xAxis}\r\n\t\t\t  <AxisX ticks={xTicks} formatTick={xFormatTick} {snapTicks} prefix={xPrefix} suffix={xSuffix} {textColor} {tickColor} {tickDashed}/>\r\n      {/if}\r\n      {#if yAxis && yKey}\r\n\t\t\t  <AxisY ticks={yTicks} formatTick={yFormatTick} prefix={yPrefix} suffix={ySuffix} {textColor} {tickColor} {tickDashed}/>\r\n      {/if}\r\n\t\t\t<Scatter {selected} {hovered} {highlighted} {overlayFill}/>\r\n\t\t\t{#if select || hover}\r\n\t\t\t\t<Voronoi {select} bind:selected {hover} bind:hovered {highlighted} on:hover on:select/>\r\n\t\t\t{/if}\r\n\t\t\t{#if labels}\r\n\t\t\t\t<Labels {hovered} {selected} content={labelContent}/>\r\n\t\t\t{/if}\r\n\t\t\t<slot name=\"svg\"/>\r\n\t\t</Svg>\r\n\t  <slot name=\"front\"/>\r\n\t</LayerCake>\r\n</div>\r\n<div class=\"visuallyhidden\">\r\n\t<Table {data} key1={zKey} key2={xKey} key3={yKey} key4={rKey}/>\r\n</div>\r\n<slot name=\"legend\"/>\r\n{#if legend && _zDomain}\r\n  <Legend domain={_zDomain} {colors} markerLength={Array.isArray(r) ? r[0] * 2 : r * 2} round={true}/>\r\n{/if}\r\n{#if footer}\r\n  <Footer>{footer}</Footer>\r\n{/if}\r\n</div>\r\n{#if output}\r\n\t<Export {el} {data} keys={[idKey, xKey, zKey, yKey]} {title} {output}/>\r\n{/if}\r\n\r\n<style>\r\n\t.chart-container {\r\n\t\twidth: 100%;\r\n\t}\r\n\t.visuallyhidden {\r\n\t\tposition: absolute; \r\n\t\twidth: 1px; \r\n\t\theight: 1px; \r\n\t\tmargin: -1px; \r\n\t\tpadding: 0; \r\n\t\toverflow: hidden;\r\n\t\tclip: rect(0,0,0,0);  \r\n\t\tborder: 0;\r\n\t}\r\n</style>",
    "<script>\r\n\timport { getContext } from 'svelte';\r\n\r\n\tconst { width, height, xScale, yRange } = getContext('LayerCake');\r\n\r\n\texport let gridlines = true;\r\n\texport let tickDashed = false;\r\n\texport let tickMarks = false;\r\n\texport let tickColor = '#bbb';\r\n\texport let textColor = '#666';\r\n\texport let formatTick = d => d;\r\n\texport let snapTicks = false;\r\n\texport let ticks = undefined;\r\n\texport let xTick = undefined;\r\n\texport let yTick = 16;\r\n\texport let dxTick = 0;\r\n\texport let dyTick = 0;\r\n\texport let prefix = '';\r\n\texport let suffix = '';\r\n\r\n\t$: isBandwidth = typeof $xScale.bandwidth === 'function';\r\n\r\n\t$: tickVals = Array.isArray(ticks) ? ticks :\r\n\t\tisBandwidth ?\r\n\t\t\t$xScale.domain() :\r\n\t\t\ttypeof ticks === 'function' ?\r\n\t\t\t\tticks($xScale.ticks()) :\r\n\t\t\t\t\t$xScale.ticks(ticks);\r\n\r\n\tfunction textAnchor(i) {\r\n\t\tif (snapTicks === true) {\r\n\t\t\tif (i === 0) {\r\n\t\t\t\treturn 'start';\r\n\t\t\t}\r\n\t\t\tif (i === tickVals.length - 1) {\r\n\t\t\t\treturn 'end';\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn 'middle';\r\n\t}\r\n</script>\r\n\r\n<g class='axis x-axis' class:snapTicks>\r\n\t{#each tickVals as tick, i}\r\n\t\t<g class='tick tick-{tick}' transform='translate({$xScale(tick)},{Math.max(...$yRange)})'>\r\n\t\t\t{#if gridlines !== false}\r\n\t\t\t\t<line class=\"gridline\" class:dashed={tickDashed} y1='{$height * -1}' y2='0' x1='0' x2='0' style='stroke: {tickColor}'></line>\r\n\t\t\t{/if}\r\n\t\t\t{#if tickMarks === true}\r\n\t\t\t\t<line class=\"tick-mark\" y1='{0}' y2='{6}' x1='{xTick || isBandwidth ? $xScale.bandwidth() / 2 : 0}' x2='{xTick || isBandwidth ? $xScale.bandwidth() / 2 : 0}' style='stroke: {tickColor}'></line>\r\n\t\t\t{/if}\r\n\t\t\t<text\r\n\t\t\t\tx=\"{xTick || isBandwidth ? $xScale.bandwidth() / 2 : 0}\"\r\n\t\t\t\ty='{yTick}'\r\n\t\t\t\tdx='{dxTick}'\r\n\t\t\t\tdy='{dyTick}'\r\n\t\t\t\ttext-anchor='{textAnchor(i)}'\r\n\t\t\t\tstyle='fill: {textColor}'>\r\n\t\t\t\t\t{i == tickVals.length - 1 ? prefix + formatTick(tick) + suffix : formatTick(tick)}\r\n\t\t\t\t</text>\r\n\t\t</g>\r\n\t{/each}\r\n</g>\r\n\r\n<style>\r\n\t.tick {\r\n\t\tfont-size: .8em;\r\n\t}\r\n\r\n\t.tick .tick-mark,\r\n\t.tick.tick-0 line {\r\n\t\tstroke-dasharray: 0;\r\n\t}\r\n\r\n\t.dashed {\r\n\t\tstroke-dasharray: 2;\r\n\t}\r\n\t/* This looks slightly better */\r\n\t.axis.snapTicks .tick:last-child text {\r\n\t\ttransform: translateX(3px);\r\n\t}\r\n\t.axis.snapTicks .tick.tick-0 text {\r\n\t\ttransform: translateX(-3px);\r\n\t}\r\n</style>\r\n",
    "<script>\r\n\timport { getContext } from 'svelte';\r\n\r\n\tconst { padding, xRange, yScale } = getContext('LayerCake');\r\n\r\n\texport let ticks = 4;\r\n\texport let tickMarks = false;\r\n\texport let gridlines = true;\r\n\texport let tickDashed = false;\r\n\texport let tickColor = '#bbb';\r\n\texport let textColor = '#666';\r\n\texport let formatTick = d => d;\r\n\texport let xTick = 0;\r\n\texport let yTick = 0;\r\n\texport let dxTick = 0;\r\n\texport let dyTick = -4;\r\n\texport let textAnchor = 'start';\r\n\texport let prefix = '';\r\n\texport let suffix = '';\r\n\r\n\t$: isBandwidth = typeof $yScale.bandwidth === 'function';\r\n\r\n\t$: tickVals = Array.isArray(ticks) ? ticks :\r\n\t\tisBandwidth ?\r\n\t\t\t$yScale.domain() :\r\n\t\t\ttypeof ticks === 'function' ?\r\n\t\t\t\tticks($yScale.ticks()) :\r\n\t\t\t\t\t$yScale.ticks(ticks);\r\n</script>\r\n\r\n<g class='axis y-axis' transform='translate({-$padding.left}, 0)'>\r\n\t{#each tickVals as tick, i}\r\n\t\t<g class='tick tick-{tick}' transform='translate({$xRange[0] + (isBandwidth ? $padding.left : 0)}, {$yScale(tick)})'>\r\n\t\t\t{#if gridlines !== false}\r\n\t\t\t\t<line\r\n\t\t\t\t\tclass=\"gridline\"\r\n\t\t\t\t\tx2='100%'\r\n\t\t\t\t\ty1={yTick + (isBandwidth ? ($yScale.bandwidth() / 2) : 0)}\r\n\t\t\t\t\ty2={yTick + (isBandwidth ? ($yScale.bandwidth() / 2) : 0)}\r\n\t\t\t\t\tclass:dashed={tickDashed}\r\n\t\t\t\t\tstyle='stroke: {tickColor}'\r\n\t\t\t\t></line>\r\n\t\t\t{/if}\r\n\t\t\t{#if tickMarks === true}\r\n\t\t\t\t<line\r\n\t\t\t\t\tclass='tick-mark'\r\n\t\t\t\t\tx1='0'\r\n\t\t\t\t\tx2='{isBandwidth ? -6 : 6}'\r\n\t\t\t\t\ty1={yTick + (isBandwidth ? ($yScale.bandwidth() / 2) : 0)}\r\n\t\t\t\t\ty2={yTick + (isBandwidth ? ($yScale.bandwidth() / 2) : 0)}\r\n\t\t\t\t\tstyle='stroke: {tickColor}'\r\n\t\t\t\t></line>\r\n\t\t\t{/if}\r\n\t\t\t<text\r\n\t\t\t\tx='{xTick}'\r\n\t\t\t\ty='{yTick + (isBandwidth ? $yScale.bandwidth() / 2 : 0)}'\r\n\t\t\t\tdx='{isBandwidth ? -4 : dxTick}'\r\n\t\t\t\tdy='{isBandwidth ? 4 : dyTick}'\r\n\t\t\t\tstyle=\"text-anchor:{isBandwidth ? 'end' : textAnchor}; fill: {textColor}\">\r\n\t\t\t\t\t{i == tickVals.length - 1 ? prefix + formatTick(tick) + suffix : formatTick(tick)}\r\n\t\t\t\t</text>\r\n\t\t</g>\r\n\t{/each}\r\n</g>\r\n\r\n<style>\r\n\t.tick {\r\n\t\tfont-size: .8em;\r\n\t}\r\n\r\n\t.dashed {\r\n\t\tstroke-dasharray: 2;\r\n\t}\r\n\r\n\t.tick.tick-0 line {\r\n\t\tstroke-dasharray: 0;\r\n\t}\r\n</style>\r\n",
    "<script>\r\n\timport { getCSV, getPNG } from '../../js/utils';\r\n\r\n  export let el;\r\n  export let data;\r\n  export let keys = [];\r\n  export let title = null;\r\n  export let output = {};\r\n</script>\r\n\r\n<div class=\"export\">\r\n  Export: \r\n  {#if output.csv}\r\n  <button on:click={() => getCSV(data, keys, title ? title : 'chart')}>CSV</button>\r\n  {/if}\r\n  {#if output.png}\r\n  <button on:click={() => getPNG(el, title ? title : 'chart')}>PNG</button>\r\n  {/if}\r\n</div>\r\n\r\n<style>\r\n  .export {\r\n    margin-top: 10px;\r\n\t\tfont-size: .8em;\r\n\t}\r\n  button {\r\n    color: white;\r\n    background-color: #0f8243;\r\n    border: none;\r\n    padding: 5px 10px;\r\n  }\r\n  button:hover {\r\n    cursor: pointer;\r\n    background-color:#295b34;\r\n  }\r\n</style>",
    "<div class=\"footer\"><slot/></div>\r\n\r\n<style>\r\n\t.footer {\r\n\t\tfont-size: .8em;\r\n\t\tcolor: grey;\r\n\t\tmargin-top: 5px;\r\n\t}\r\n</style>",
    "<script>\r\n\timport { getContext } from 'svelte';\r\n\r\n\tconst { data, xScale, yScale, custom } = getContext('LayerCake');\r\n\r\n\texport let hovered = null;\r\n\texport let selected = null;\r\n\texport let content = null;\r\n\t\r\n\tlet coords = $custom.coords;\r\n\tlet idKey = $custom.idKey;\r\n\tlet labelKey = $custom.labelKey;\r\n\t// let colorHover = $custom.colorHover ? $custom.colorHover : 'orange';\r\n\t// let colorSelect = $custom.colorSelect ? $custom.colorSelect : '#206095';\r\n</script>\r\n\r\n{#if $coords}\r\n<defs>\r\n\t<filter x=\"0\" y=\"0\" width=\"1\" height=\"1\" id=\"bgfill\">\r\n\t\t<feFlood flood-color=\"rgba(255,255,255,0.8)\" result=\"bg\" />\r\n\t\t<feMerge>\r\n\t\t\t<feMergeNode in=\"bg\"/>\r\n\t\t\t<feMergeNode in=\"SourceGraphic\"/>\r\n\t\t</feMerge>\r\n\t</filter>\r\n</defs>\r\n<g class=\"label-group\">\r\n\t{#if $coords[0] && $coords[0].x}\r\n\t{#each $coords as d, i}\r\n\t\t{#if [hovered, selected].includes($data[i][idKey])}\r\n\t\t<text\r\n\t\t\tclass=\"label\"\r\n\t\t\ttransform=\"translate(5,-5)\"\r\n\t\t\tfilter=\"url(#bgfill)\"\r\n\t\t\tfill=\"#333\"\r\n\t\t  x={$xScale(d.x)}\r\n\t\t\ty={$yScale(d.y)}>\r\n\t\t\t{content ? content : $data[i][labelKey]}\r\n\t\t</text>\r\n\t\t{/if}\r\n\t{/each}\r\n\t{:else if $coords[0] && $coords[0][0] && $coords[0][0].x}\r\n\t{#each $coords as d, i}\r\n\t\t{#if [hovered, selected].includes($data[i][0][idKey])}\r\n\t\t<text\r\n\t\t\tclass=\"label\"\r\n\t\t\ttransform=\"translate(2,3)\"\r\n\t\t\tfilter=\"url(#bgfill)\"\r\n\t\t\tfill=\"#333\"\r\n\t\t  x={$xScale(d[d.length - 1].x)}\r\n\t\t\ty={$yScale(d[d.length - 1].y)}>\r\n\t\t\t{content ? content : $data[i][0][labelKey]}\r\n\t\t</text>\r\n\t\t{/if}\r\n\t{/each}\r\n\t{/if}\r\n</g>\r\n{/if}\r\n\r\n<style>\r\n\t.label {\r\n\t\tfont-size: 0.8em;\r\n\t}\r\n</style>",
    "<script>\r\n  export let domain = null;\r\n  export let colors = null;\r\n  export let line = false; // true if line chart\r\n  export let comparison = false; // true if chart uses bars + markers for comparison\r\n  export let horizontal = true; // true if marker lines should be horizontal, false if vertical\r\n  export let markerWidth = 2.5;\r\n  export let markerLength = 13;\r\n  export let round = false; // to represent round markers\r\n</script>\r\n\r\n{#if Array.isArray(domain) && Array.isArray(colors)}\r\n  <ul class=\"legend\" aria-hidden=\"true\">\r\n    {#each domain as label, i}\r\n      <li>\r\n        <div\r\n          class=\"bullet\"\r\n          class:round\r\n          style=\"background-color: {colors[i]}; width: {!horizontal && (line || (comparison && i != 0)) ? markerWidth : markerLength}px; height: {horizontal && (line || (comparison && i != 0)) ? markerWidth : markerLength}px\"\r\n        />\r\n        {label}\r\n      </li>\r\n    {/each}\r\n  </ul>\r\n{/if}\r\n\r\n<style>\r\n  ul.legend {\r\n    margin: 0;\r\n    padding: 0;\r\n  }\r\n  ul.legend li {\r\n    display: inline;\r\n    font-size: .8em;\r\n  }\r\n  ul.legend li + li {\r\n    margin-left: 8px;\r\n  }\r\n  .bullet {\r\n\t\tdisplay: inline-block;\r\n    vertical-align: middle;\r\n\t}\r\n  .round {\r\n    border-radius: 50%;\r\n  }\r\n</style>",
    "<script>\r\n\timport { getContext, createEventDispatcher } from 'svelte';\r\n\r\n\tconst { data, xScale, yScale, zGet, config, custom } = getContext('LayerCake');\r\n\tconst dispatch = createEventDispatcher();\r\n\r\n\texport let lineWidth = 2.5;\r\n\texport let hover = false;\r\n\texport let hovered = null;\r\n\texport let select = false;\r\n\texport let selected = null;\r\n\texport let highlighted = [];\r\n\t\r\n\tlet coords = $custom.coords;\r\n\tlet idKey = $custom.idKey;\r\n\tlet colorHover = $custom.colorHover ? $custom.colorHover : 'orange';\r\n\tlet colorSelect = $custom.colorSelect ? $custom.colorSelect : '#206095';\r\n\tlet colorHighlight = $custom.colorHighlight ? $custom.colorHighlight : '#206095';\r\n\r\n\t// Function to make SVG path\r\n\tconst makePath = (group) => {\r\n\t\tlet path = 'M' + group\r\n\t\t.map(d => {\r\n\t\t\treturn $xScale(d.x) + ',' + $yScale(d.y);\r\n\t\t})\r\n\t\t.join('L');\r\n\t\treturn path;\r\n\t}\r\n\r\n\tfunction doHover(e, d) {\r\n\t\tif (hover) {\r\n\t\t\thovered = d ? d[0][idKey] : null;\r\n\t\t\tdispatch('hover', {\r\n\t\t\t\tid: hovered,\r\n\t\t\t\tdata: d,\r\n\t\t\t\tevent: e\r\n\t\t\t});\r\n\t\t}\r\n\t}\r\n\r\n\tfunction doSelect(e, d) {\r\n\t\tif (select) {\r\n\t\t\tselected = d ? d[0][idKey] : null;\r\n\t\t\tdispatch('select', {\r\n\t\t\t\tid: selected,\r\n\t\t\t\tdata: d,\r\n\t\t\t\tevent: e\r\n\t\t\t});\r\n\t\t}\r\n\t}\r\n</script>\r\n\r\n{#if $coords}\r\n<g class=\"line-group\">\r\n\t{#each $coords as group, i}\r\n\t\t<!-- svelte-ignore a11y-click-events-have-key-events -->\r\n\t\t<!-- svelte-ignore a11y-no-noninteractive-tabindex -->\r\n\t\t<path\r\n\t\t  class=\"path-hover\"\r\n\t\t\td=\"{makePath(group)}\"\r\n\t\t\ton:mouseover={hover ? (e) => doHover(e, $data[i]) : null}\r\n\t\t\ton:mouseleave={hover ? (e) => doHover(e, null) : null}\r\n\t\t\ton:focus={select ? (e) => doHover(e, $data[i]) : null}\r\n\t\t\ton:blur={select ? (e) => doHover(e, null) : null}\r\n\t\t\ton:click={select ? (e) => doSelect(e, $data[i]) : null}\r\n\t\t\ttabindex=\"{hover || select ? 0 : -1}\"\r\n\t\t/>\r\n\t  <path\r\n\t\t  class=\"path-line\"\r\n\t\t\td=\"{makePath(group)}\"\r\n\t\t\tstroke=\"{\r\n\t\t\t\t$config.z ? $zGet($data[i][0]) : $config.zRange[0]}\"\r\n\t\t\tstroke-width=\"{\r\n\t\t\t\tlineWidth\r\n\t\t\t}\"\r\n\t\t/>\r\n\t{/each}\r\n\t\r\n\t{#if idKey && (hover || selected || highlighted[0])}\r\n\t{#each $coords as group, i}\r\n\t\t{#if [hovered, selected, ...highlighted].includes($data[i][0][idKey]) }\r\n\t  <path\r\n\t\t  class=\"path-overlay\"\r\n\t\t\td=\"{makePath(group)}\"\r\n\t\t\tstroke=\"{\r\n\t\t\t\t$data[i][0][idKey] == hovered ? colorHover :\r\n\t\t\t\t$data[i][0][idKey] == selected ? colorSelect :\r\n\t\t\t\tcolorHighlight\r\n\t\t\t}\"\r\n\t\t\tstroke-width=\"{\r\n\t\t\t\tlineWidth + 1.5\r\n\t\t\t}\"\r\n\t\t/>\r\n\t\t{/if}\r\n\t{/each}\r\n\t{/if}\r\n</g>\r\n{/if}\r\n\r\n<style>\r\n\tpath {\r\n\t\tfill: none;\r\n\t\tstroke-linejoin: round;\r\n\t\tstroke-linecap: round;\r\n\t}\r\n\t.path-hover {\r\n\t\tstroke: rgba(255,255,255,0);\r\n\t\tstroke-width: 7;\r\n\t}\r\n\t.path-line, .path-overlay {\r\n\t\tpointer-events: none;\r\n\t}\r\n</style>\r\n\r\n\r\n",
    "<div class=\"title\"><slot/></div>\r\n\r\n<style>\r\n\t.title {\r\n\t\tfont-size: 1.1em;\r\n\t\tfont-weight: bold;\r\n\t\tmargin-bottom: 10px;\r\n\t}\r\n</style>",
    "<script>\r\n\timport { Delaunay } from 'd3-delaunay';\r\n\timport { getContext, createEventDispatcher } from 'svelte';\r\n\r\n\tconst { data, width, height, custom, xScale, yScale } = getContext('LayerCake');\r\n\tconst dispatch = createEventDispatcher();\r\n\r\n\texport let hover = false;\r\n\texport let hovered = null;\r\n\texport let select = false;\r\n\texport let selected = null;\r\n\r\n\tlet coords = $custom.coords;\r\n\tlet idKey = $custom.idKey;\r\n\r\n\tfunction doHover(e, d) {\r\n\t\tif (hover) {\r\n\t\t\thovered = d ? d[idKey] : null;\r\n\t\t\tdispatch('hover', {\r\n\t\t\t\tid: hovered,\r\n\t\t\t\tdata: d,\r\n\t\t\t\tevent: e\r\n\t\t\t});\r\n\t\t}\r\n\t}\r\n\r\n\tfunction doSelect(e, d) {\r\n\t\tif (select) {\r\n\t\t\tselected = d ? d[idKey] : null;\r\n\t\t\tdispatch('select', {\r\n\t\t\t\tid: selected,\r\n\t\t\t\tdata: d,\r\n\t\t\t\tevent: e\r\n\t\t\t});\r\n\t\t}\r\n\t}\r\n\r\n\t$: coordsArray = Array.isArray($coords) ? $coords.map(d => [$xScale(d.x), $yScale(d.y)]) : [];\r\n\t$: voronoi = Delaunay.from(coordsArray).voronoi([0, 0, $width, $height]);\r\n\r\n</script>\r\n\r\n<style>\r\n\t.voronoi-cell {\r\n\t\tfill: none;\r\n\t\tstroke: none;\r\n\t\tpointer-events: all;\r\n\t}\r\n</style>\r\n\r\n{#if voronoi}\r\n<g class=\"voronoi-group\">\r\n{#each $data as d, i}\r\n\t<!-- svelte-ignore a11y-click-events-have-key-events -->\r\n\t<!-- svelte-ignore a11y-no-noninteractive-tabindex -->\r\n\t<path\r\n\t\tclass=\"voronoi-cell\"\r\n\t\td={voronoi.renderCell(i)}\r\n\t\ton:mouseover={hover ? e => doHover(e, $data[i]) : null}\r\n\t\ton:mouseleave={hover ? e => doHover(e, null) : null}\r\n\t\ton:focus={select ? e => doHover(e, $data[i]): null}\r\n\t\ton:blur={select ? e => doHover(e, null) : null}\r\n\t\ton:click={select ? e => doSelect(e, $data[i]) : null}\r\n\t\ttabindex=\"{hover || select ? 0 : -1}\"\r\n\t/>\r\n{/each}\r\n</g>\r\n{/if}\r\n",
    "<script>\n\timport { setContext, createEventDispatcher, onMount, onDestroy } from \"svelte\";\n\timport maplibre from \"maplibre-gl\";\n\timport * as _pmtiles from \"pmtiles\";\n\n\tconst dispatch = createEventDispatcher();\n\n\texport let map;\n\texport let id = \"map\";\n\texport let location = {\n\t\tlng: 15,\n\t\tlat: 45,\n\t\tzoom: 1\n\t};\n\texport let style = {\n\t\t\"version\": 8,\n\t\t\"sources\": {},\n\t\t\"layers\": [\n\t\t\t{\n\t\t\t\t\"id\": \"background\",\n\t\t\t\t\"type\": \"background\",\n\t\t\t\t\"paint\": {\"background-color\": \"lightgrey\"}\n\t\t\t}\n\t\t]\n\t}; // Can be a json style definition or a url\n\texport let css = null; // To set a local url for the css file (instead of CDN default)\n\texport let pmtiles = false;\n\texport let options = {};\n\texport let minzoom = 0;\n\texport let maxzoom = 14;\n\texport let controls = false;\n\texport let tabbable = false;\n\n\texport let zoom = null;\n\texport let center = null;\n\texport let pitch = null;\n\texport let bearing = null;\n\texport let interactive = true;\n\texport let attribution = true;\n\n\tlet container;\n\tlet _options = {};\n\tlet loaded = false;\n\n\tsetContext(\"map\", {\n\t\tgetMap: () => map,\n\t});\n\n\tfunction sleep (ms = 1000) {\n  \treturn new Promise((resolve) => setTimeout(resolve, ms));\n\t}\n\t\n\t// Interpret location\n\tif (location.bounds) {\n\t\t_options.bounds = location.bounds;\n\t} else if (location.lng && location.lat) {\n\t\t_options.center = [+location.lng, +location.lat];\n\t\tif (location.zoom) {\n\t\t\t_options.zoom = +location.zoom;\n\t\t}\n\t\tif (location.pitch) {\n\t\t\t_options.pitch = +location.pitch;\n\t\t}\n\t\tif (location.bearing) {\n\t\t\t_options.bearing = +location.bearing;\n\t\t}\n\t}\n\t// Disable attribution if attribution = false\n\tif (!attribution) {\n\t\t_options.attributionControl = false;\n\t}\n\n\t_options = {..._options, ...options}; // Combine core options + custom user options\n\n\tonMount(() => {\n\t\tif (pmtiles) {\n\t\t\tlet protocol = new _pmtiles.Protocol();\n\t\t\tmaplibre.addProtocol(\"pmtiles\",protocol.tile);\n\t\t}\n\n\t\tmap = new maplibre.Map({\n\t\t\tcontainer,\n\t\t\tstyle,\n\t\t\tminZoom: minzoom,\n\t\t\tmaxZoom: maxzoom,\n\t\t\tinteractive,\n\t\t\t..._options,\n\t\t});\n\t\t\n\t\tif (controls && !Array.isArray(controls)) {\n\t\t\tmap.addControl(new maplibre.NavigationControl({showCompass: false}));\n\t\t} else if (Array.isArray(controls) && controls != [\"locate\"]) {\n\t\t\tmap.addControl(new maplibre.NavigationControl({showCompass: controls.includes(\"compass\"), visualizePitch: controls.includes(\"pitch\")}));\n\t\t}\n\t\t\n\t\tif (Array.isArray(controls) && controls.includes(\"locate\")) {\n\t\t\tmap.addControl(new maplibre.GeolocateControl());\n\t\t}\n\t\t\n\t\t// Get initial zoom level\n\t\tmap.on(\"load\", (e) => {\n\t\t\tzoom = map.getZoom();\n\t\t\tcenter = map.getCenter();\n\t\t\tpitch = map.getPitch();\n\t\t\tbearing = map.getBearing();\n\t\t\tloaded = true;\n\t\t\t\n\t\t\t// Prevent map from being tabbable\n\t\t\tif (!tabbable && document.querySelector(`#${id} canvas`)) {\n\t\t\t\tdocument.querySelector(`#${id} canvas`).tabIndex = \"-1\";\n\t\t\t}\n\n\t\t\tdispatch(\"load\", {\n\t\t\t\tevent: e\n\t\t\t});\n\t\t});\n\n\t\t// Update zoom level and center when the view changes\n\t\tmap.on(\"moveend\", () => {\n\t\t\tzoom = map.getZoom();\n\t\t\tcenter = map.getCenter();\n\t\t\tpitch = map.getPitch();\n\t\t\tbearing = map.getBearing();\n\t\t});\n\t});\n\n\tonDestroy(async () => {\n\t\tawait sleep(250);\n\n\t\tif (map) map.remove();\n\t\tmap = null;\n\t});\n\n\t// Function to switch map style if style prop changes\n\tfunction setStyle(style) {\n\t\tif (map) map.setStyle(style);\n\t\tdispatch(\"style\", {\n\t\t\tstyle\n\t\t});\n\t}\n\t$: setStyle(style);\n</script>\n\n<svelte:head>\n\t<link\n\t\trel=\"stylesheet\"\n\t\thref=\"{ css ? css : 'https://unpkg.com/maplibre-gl@2.4.0/dist/maplibre-gl.css' }\"\n\t/>\n</svelte:head>\n\n<div bind:this={container} {id} class=\"map\">\n\t{#if loaded}\n\t\t<slot />\n\t{/if}\n</div>\n\n<style>\n\t:global(.maplibregl-control-container button) {\n\t\tmargin: 0;\n\t}\n\t.map {\n\t\twidth: 100%;\n\t\theight: 100%;\n\t}\n</style>",
    "<script>\n  import { getContext, onDestroy } from 'svelte';\n  import maplibre from 'maplibre-gl';\n\n  export let content;\n\n  const tooltip = new maplibre.Popup({\n\t\tcloseButton: false,\n\t\tcloseOnClick: false\n\t});\n\n  const { getMap } = getContext('map');\n\tconst map = getMap();\n  const hoverObj = getContext('hover');\n\n  function updateTooltip(obj, content) {\n    if (obj.id) {\n      tooltip\n\t\t\t.setLngLat(obj.event.lngLat)\n      .setHTML(content ? content : obj.code)\n      .addTo(map);\n    } else {\n      tooltip.remove();\n    }\n  }\n\n  $: updateTooltip($hoverObj, content);\n\n  onDestroy(() => tooltip.remove());\n</script>\n\n<style>\n  :global(.maplibregl-popup-content) {\n\t\tpadding: 5px 10px !important;\n\t}\n</style>",
    "<!--\n\t@component\n\tLayer Cake component\n -->\n<script>\n\timport { setContext, onMount } from 'svelte';\n\timport { writable, derived } from 'svelte/store';\n\n\timport makeAccessor from './utils/makeAccessor.js';\n\timport filterObject from './utils/filterObject.js';\n\timport debounce from './utils/debounce.js';\n\n\timport calcScaleExtents from './helpers/calcScaleExtents.js';\n\timport calcDomain from './helpers/calcDomain.js';\n\timport createScale from './helpers/createScale.js';\n\timport createGetter from './helpers/createGetter.js';\n\timport getRange from './helpers/getRange.js';\n\timport printDebug from './helpers/printDebug.js';\n\n\timport defaultScales from './settings/defaultScales.js';\n\n\tconst printDebug_debounced = debounce(printDebug, 200);\n\n\t/** @type {Boolean} [ssr=false] Whether this chart should be rendered server side. */\n\texport let ssr = false;\n\t/** @type {Boolean} [pointerEvents=true] Whether to allow pointer events via CSS. Set this to `false` to set `pointer-events: none;` on all components, disabling all mouse interaction. */\n\texport let pointerEvents = true;\n\t/** @type {String} [position='relative'] Determine the positioning of the wrapper div. Set this to `'absolute'` when you want to stack cakes. */\n\texport let position = 'relative';\n\t/** @type {Boolean} [percentRange=false] If `true`, set all scale ranges to `[0, 100]`. Ranges reversed via `xReverse`, `yReverse`, `zReverse` or `rReverse` props will continue to be reversed as usual. */\n\texport let percentRange = false;\n\n\t/** @type {Number} [width=containerWidth] Override the automated width. */\n\texport let width = undefined;\n\t/** @type {Number} [height=containerHeight] Override the automated height. */\n\texport let height = undefined;\n\n\t/** @type {Number} [containerWidth=100] The bound container width. */\n\texport let containerWidth = width || 100;\n\t/** @type {Number} [containerHeight=100] The bound container height. */\n\texport let containerHeight = height || 100;\n\n\t/**\t@type {Element} [element] The .layercake-container `<div>` tag. Useful for bindings. */\n\texport let element = undefined;\n\n\t/* --------------------------------------------\n\t * Parameters\n\t * Values that computed properties are based on and that\n\t * can be easily extended from config values\n\t *\n\t */\n\n\t/** @type {String|Function|Number|Array} x The x accessor. The key in each row of data that corresponds to the x-field. This can be a string, an accessor function, a number or an array of any combination of those types. This property gets converted to a function when you access it through the context. */\n\texport let x = undefined;\n\t/** @type {String|Function|Number|Array} y The y accessor. The key in each row of data that corresponds to the y-field. This can be a string, an accessor function, a number or an array of any combination of those types. This property gets converted to a function when you access it through the context. */\n\texport let y = undefined;\n\t/** @type {String|Function|Number|Array} z The z accessor. The key in each row of data that corresponds to the z-field. This can be a string, an accessor function, a number or an array of any combination of those types. This property gets converted to a function when you access it through the context. */\n\texport let z = undefined;\n\t/** @type {String|Function|Number|Array} r The r accessor. The key in each row of data that corresponds to the r-field. This can be a string, an accessor function, a number or an array of any combination of those types. This property gets converted to a function when you access it through the context. */\n\texport let r = undefined;\n\n\t/** @type {Array|Object} [data=[]] If `data` is not a flat array of objects and you want to use any of the scales, set a flat version of the data via the `flatData` prop. */\n\texport let data = [];\n\n\t/** @type {[min: ?Number|null, max: ?Number|null]|String[]|Number[]|Function} [xDomain] Set a min or max. For linear scales, if you want to inherit the value from the data's extent, set that value to `null`. This value can also be an array because sometimes your scales are [piecewise](https://github.com/d3/d3-scale#continuous_domain) or are a list of discrete values such as in [ordinal scales](https://github.com/d3/d3-scale#ordinal-scales), useful for color series. Set it to a function that receives the computed domain and lets you return a modified domain, useful for sorting values. */\n\texport let xDomain = undefined;\n\t/** @type {[min: ?Number|null, max: ?Number|null]|String[]|Number[]|Function} [yDomain] Set a min or max. For linear scales, if you want to inherit the value from the data's extent, set that value to `null`.  Set it to a function that receives the computed domain and lets you return a modified domain, useful for sorting values. */\n\texport let yDomain = undefined;\n\t/** @type {[min: ?Number|null, max: ?Number|null]|String[]|Number[]|Function} [zDomain] Set a min or max. For linear scales, if you want to inherit the value from the data's extent, set that value to `null`. This value can also be an array because sometimes your scales are [piecewise](https://github.com/d3/d3-scale#continuous_domain) or are a list of discrete values such as in [ordinal scales](https://github.com/d3/d3-scale#ordinal-scales), useful for color series. Set it to a function that receives the computed domain and lets you return a modified domain, useful for sorting values. */\n\texport let zDomain = undefined;\n\t/** @type {[min: ?Number|null, max: ?Number|null]|String[]|Number[]|Function} [rDomain] Set a min or max. For linear scales, if you want to inherit the value from the data's extent, set that value to `null`. This value can also be an array because sometimes your scales are [piecewise](https://github.com/d3/d3-scale#continuous_domain) or are a list of discrete values such as in [ordinal scales](https://github.com/d3/d3-scale#ordinal-scales), useful for color series. Set it to a function that receives the computed domain and lets you return a modified domain, useful for sorting values. */\n\texport let rDomain = undefined;\n\t/** @type {Boolean|Number} [xNice=false] Applies D3's [scale.nice()](https://github.com/d3/d3-scale#continuous_nice) to the x domain. */\n\texport let xNice = false;\n\t/** @type {Boolean|Number} [yNice=false] Applies D3's [scale.nice()](https://github.com/d3/d3-scale#continuous_nice) to the y domain. */\n\texport let yNice = false;\n\t/** @type {Boolean|Number} [zNice=false] Applies D3's [scale.nice()](https://github.com/d3/d3-scale#continuous_nice) to the z domain. */\n\texport let zNice = false;\n\t/** @type {Boolean} [rNice=false] Applies D3's [scale.nice()](https://github.com/d3/d3-scale#continuous_nice) to the r domain. */\n\texport let rNice = false;\n\t/** @type {[leftPixels: Number, rightPixels: Number]} [xPadding] Assign a pixel value to add to the min or max of the scale. This will increase the scales domain by the scale unit equivalent of the provided pixels. */\n\texport let xPadding = undefined;\n\t/** @type {[leftPixels: Number, rightPixels: Number]} [yPadding] Assign a pixel value to add to the min or max of the scale. This will increase the scales domain by the scale unit equivalent of the provided pixels. */\n\texport let yPadding = undefined;\n\t/** @type {[leftPixels: Number, rightPixels: Number]} [zPadding] Assign a pixel value to add to the min or max of the scale. This will increase the scales domain by the scale unit equivalent of the provided pixels. */\n\texport let zPadding = undefined;\n\t/** @type {[leftPixels: Number, rightPixels: Number]} [rPadding] Assign a pixel value to add to the min or max of the scale. This will increase the scales domain by the scale unit equivalent of the provided pixels. */\n\texport let rPadding = undefined;\n\t/** @type {Function} [xScale=d3.scaleLinear] The D3 scale that should be used for the x-dimension. Pass in an instantiated D3 scale if you want to override the default or you want to extra options. */\n\texport let xScale = defaultScales.x;\n\t/** @type {Function} [yScale=d3.scaleLinear] The D3 scale that should be used for the x-dimension. Pass in an instantiated D3 scale if you want to override the default or you want to extra options. */\n\texport let yScale = defaultScales.y;\n\t/** @type {Function} [zScale=d3.scaleLinear] The D3 scale that should be used for the x-dimension. Pass in an instantiated D3 scale if you want to override the default or you want to extra options. */\n\texport let zScale = defaultScales.z;\n\t/** @type {Function} [rScale=d3.scaleSqrt] The D3 scale that should be used for the x-dimension. Pass in an instantiated D3 scale if you want to override the default or you want to extra options. */\n\texport let rScale = defaultScales.r;\n\t/** @type {[min: Number, max: Number]|Function|String[]|Number[]} [xRange] Override the default x range of `[0, width]` by setting an array or function with argument `({ width, height})` that returns an array. Setting this prop overrides `xReverse`. This can also be a list of numbers or strings for scales with discrete ranges like [scaleThreshhold](https://github.com/d3/d3-scale#threshold-scales) or [scaleQuantize](https://github.com/d3/d3-scale#quantize-scales). */\n\texport let xRange = undefined;\n\t/** @type {[min: Number, max: Number]|Function|String[]|Number[]} [xRange] Override the default y range of `[0, height]` by setting an array or function with argument `({ width, height})` that returns an array. Setting this prop overrides `yReverse`. This can also be a list of numbers or strings for scales with discrete ranges like [scaleThreshhold](https://github.com/d3/d3-scale#threshold-scales) or [scaleQuantize](https://github.com/d3/d3-scale#quantize-scales). */\n\texport let yRange = undefined;\n\t/** @type {[min: Number, max: Number]|Function|String[]|Number[]} [zRange] Override the default z range of `[0, width]` by setting an array or function with argument `({ width, height})` that returns an array. Setting this prop overrides `zReverse`. This can also be a list of numbers or strings for scales with discrete ranges like [scaleThreshhold](https://github.com/d3/d3-scale#threshold-scales) or [scaleQuantize](https://github.com/d3/d3-scale#quantize-scales). */\n\texport let zRange = undefined;\n\t/** @type {[min: Number, max: Number]|Function|String[]|Number[]} [rRange] Override the default r range of `[1, 25]` by setting an array or function with argument `({ width, height})` that returns an array. Setting this prop overrides `rReverse`. This can also be a list of numbers or strings for scales with discrete ranges like [scaleThreshhold](https://github.com/d3/d3-scale#threshold-scales) or [scaleQuantize](https://github.com/d3/d3-scale#quantize-scales). */\n\texport let rRange = undefined;\n\t/** @type {Boolean} [xReverse=false] Reverse the default x range. By default this is `false` and the range is `[0, width]`. Ignored if you set the xRange prop. */\n\texport let xReverse = false;\n\t/** @type {Boolean} [yReverse=true] Reverse the default y range. By default this is `true` and the range is `[height, 0]` unless using an ordinal scale with a `.bandwidth` method for `yScale`. Ignored if you set the `yRange` prop. */\n\texport let yReverse = undefined\n\t/** @type {Boolean} [zReverse=false] Reverse the default z range. By default this is `false` and the range is `[0, width]`. Ignored if you set the zRange prop. */\n\texport let zReverse = false;\n\t/** @type {Boolean} [rReverse=false] Reverse the default r range. By default this is `false` and the range is `[1, 25]`. Ignored if you set the rRange prop. */\n\texport let rReverse = false;\n\t/** @type {{top?: Number, right?: Number, bottom?: Number, left?: Number}} [padding={}] The amount of padding to put around your chart. It operates like CSS box-sizing: border-box; where values are subtracted from the parent container's width and height, the same as a [D3 margin convention](https://bl.ocks.org/mbostock/3019563). */\n\texport let padding = {};\n\t/** @type {{ x?: [min: Number, max: Number], y?: [min: Number, max: Number], r?: [min: Number, max: Number], z?: [min: Number, max: Number] }} [extents] Manually set the extents of the x, y or r scale as a two-dimensional array of the min and max you want. Setting values here will skip any dynamic extent calculation of the data for that dimension. */\n\texport let extents = {};\n\n\t/** @type {Array} [flatData=data] A flat version of data. */\n\texport let flatData = undefined;\n\n\t/** @type {Object} custom Any extra configuration values you want available on the LayerCake context. This could be useful for color lookups or additional constants. */\n\texport let custom = {};\n\n\t/** @type {Boolean} debug Enable debug printing to the console. Useful to inspect your scales and dimensions. */\n\texport let debug = false;\n\n\t/**\n\t * Make this reactive\n\t */\n\t$: yReverseValue = typeof yReverse === 'undefined'\n\t\t? typeof yScale.bandwidth === 'function' ? false : true\n\t\t: yReverse;\n\n\t/* --------------------------------------------\n\t * Keep track of whether the component has mounted\n\t * This is used to emit warnings once we have measured\n\t * the container object and it doesn't have proper dimensions\n\t */\n\tlet isMounted = false;\n\tonMount(() => {\n\t\tisMounted = true;\n\t});\n\n\t/* --------------------------------------------\n\t * Preserve a copy of our passed in settings before we modify them\n\t * Return this to the user's context so they can reference things if need be\n\t * Add the active keys since those aren't on our settings object.\n\t * This is mostly an escape-hatch\n\t */\n\tconst config = {};\n\t$: if (x) config.x = x;\n\t$: if (y) config.y = y;\n\t$: if (z) config.z = z;\n\t$: if (r) config.r = r;\n\t$: if (xDomain) config.xDomain = xDomain;\n\t$: if (yDomain) config.yDomain = yDomain;\n\t$: if (zDomain) config.zDomain = zDomain;\n\t$: if (rDomain) config.rDomain = rDomain;\n\t$: if (xRange) config.xRange = xRange;\n\t$: if (yRange) config.yRange = yRange;\n\t$: if (zRange) config.zRange = zRange;\n\t$: if (rRange) config.rRange = rRange;\n\n\t/* --------------------------------------------\n\t * Make store versions of each parameter\n\t * Prefix these with `_` to keep things organized\n\t */\n\tconst _percentRange = writable(percentRange);\n\tconst _containerWidth = writable(containerWidth);\n\tconst _containerHeight = writable(containerHeight);\n\tconst _extents = writable(filterObject(extents));\n\tconst _data = writable(data);\n\tconst _flatData = writable(flatData || data);\n\tconst _padding = writable(padding);\n\tconst _x = writable(makeAccessor(x));\n\tconst _y = writable(makeAccessor(y));\n\tconst _z = writable(makeAccessor(z));\n\tconst _r = writable(makeAccessor(r));\n\tconst _xDomain = writable(xDomain);\n\tconst _yDomain = writable(yDomain);\n\tconst _zDomain = writable(zDomain);\n\tconst _rDomain = writable(rDomain);\n\tconst _xNice = writable(xNice);\n\tconst _yNice = writable(yNice);\n\tconst _zNice = writable(zNice);\n\tconst _rNice = writable(rNice);\n\tconst _xReverse = writable(xReverse);\n\tconst _yReverse = writable(yReverseValue);\n\tconst _zReverse = writable(zReverse);\n\tconst _rReverse = writable(rReverse);\n\tconst _xPadding = writable(xPadding);\n\tconst _yPadding = writable(yPadding);\n\tconst _zPadding = writable(zPadding);\n\tconst _rPadding = writable(rPadding);\n\tconst _xRange = writable(xRange);\n\tconst _yRange = writable(yRange);\n\tconst _zRange = writable(zRange);\n\tconst _rRange = writable(rRange);\n\tconst _xScale = writable(xScale);\n\tconst _yScale = writable(yScale);\n\tconst _zScale = writable(zScale);\n\tconst _rScale = writable(rScale);\n\tconst _config = writable(config);\n\tconst _custom = writable(custom);\n\n\t$: $_percentRange = percentRange;\n\t$: $_containerWidth = containerWidth;\n\t$: $_containerHeight = containerHeight;\n\t$: $_extents = filterObject(extents);\n\t$: $_data = data;\n\t$: $_flatData = flatData || data;\n\t$: $_padding = padding;\n\t$: $_x = makeAccessor(x);\n\t$: $_y = makeAccessor(y);\n\t$: $_z = makeAccessor(z);\n\t$: $_r = makeAccessor(r);\n\t$: $_xDomain = xDomain;\n\t$: $_yDomain = yDomain;\n\t$: $_zDomain = zDomain;\n\t$: $_rDomain = rDomain;\n\t$: $_xNice = xNice;\n\t$: $_yNice = yNice;\n\t$: $_zNice = zNice;\n\t$: $_rNice = rNice;\n\t$: $_xReverse = xReverse;\n\t$: $_yReverse = yReverseValue;\n\t$: $_zReverse = zReverse;\n\t$: $_rReverse = rReverse;\n\t$: $_xPadding = xPadding;\n\t$: $_yPadding = yPadding;\n\t$: $_zPadding = zPadding;\n\t$: $_rPadding = rPadding;\n\t$: $_xRange = xRange;\n\t$: $_yRange = yRange;\n\t$: $_zRange = zRange;\n\t$: $_rRange = rRange;\n\t$: $_xScale = xScale;\n\t$: $_yScale = yScale;\n\t$: $_zScale = zScale;\n\t$: $_rScale = rScale;\n\t$: $_custom = custom;\n\t$: $_config = config;\n\n\t/* --------------------------------------------\n\t * Create derived values\n\t * Suffix these with `_d`\n\t */\n\tconst activeGetters_d = derived([_x, _y, _z, _r], ([$x, $y, $z, $r]) => {\n\t\tconst obj = {};\n\t\tif ($x) {\n\t\t\tobj.x = $x;\n\t\t}\n\t\tif ($y) {\n\t\t\tobj.y = $y;\n\t\t}\n\t\tif ($z) {\n\t\t\tobj.z = $z;\n\t\t}\n\t\tif ($r) {\n\t\t\tobj.r = $r;\n\t\t}\n\t\treturn obj;\n\t});\n\n\tconst padding_d = derived([_padding, _containerWidth, _containerHeight], ([$padding]) => {\n\t\tconst defaultPadding = { top: 0, right: 0, bottom: 0, left: 0 };\n\t\treturn Object.assign(defaultPadding, $padding);\n\t});\n\n\tconst box_d = derived(\n\t\t[_containerWidth, _containerHeight, padding_d],\n\t\t([$containerWidth, $containerHeight, $padding]) => {\n\t\t\tconst b = {};\n\t\t\tb.top = $padding.top;\n\t\t\tb.right = $containerWidth - $padding.right;\n\t\t\tb.bottom = $containerHeight - $padding.bottom;\n\t\t\tb.left = $padding.left;\n\t\t\tb.width = b.right - b.left;\n\t\t\tb.height = b.bottom - b.top;\n\t\t\tif (b.width <= 0 && isMounted === true) {\n\t\t\t\tconsole.warn(\n\t\t\t\t\t'[LayerCake] Target div has zero or negative width. Did you forget to set an explicit width in CSS on the container?'\n\t\t\t\t);\n\t\t\t}\n\t\t\tif (b.height <= 0 && isMounted === true) {\n\t\t\t\tconsole.warn(\n\t\t\t\t\t'[LayerCake] Target div has zero or negative height. Did you forget to set an explicit height in CSS on the container?'\n\t\t\t\t);\n\t\t\t}\n\t\t\treturn b;\n\t\t}\n\t);\n\n\tconst width_d = derived([box_d], ([$box]) => {\n\t\treturn $box.width;\n\t});\n\n\tconst height_d = derived([box_d], ([$box]) => {\n\t\treturn $box.height;\n\t});\n\n\t/* --------------------------------------------\n\t * Calculate extents by taking the extent of the data\n\t * and filling that in with anything set by the user\n\t * Note that this is different from an \"extent\" passed\n\t * in as a domain, which can be a partial domain\n\t */\n\tconst extents_d = derived(\n\t\t[_flatData, activeGetters_d, _extents, _xScale, _yScale, _rScale, _zScale],\n\t\t([$flatData, $activeGetters, $extents, $_xScale, $_yScale, $_rScale, $_zScale]) => {\n\t\t\tconst scaleLookup = { x: $_xScale, y: $_yScale, r: $_rScale, z: $_zScale };\n\t\t\tconst getters = filterObject($activeGetters, $extents);\n\t\t\tconst activeScales = Object.fromEntries(Object.keys(getters).map((k) => [k, scaleLookup[k]]));\n\n\t\t\tif (Object.keys(getters).length > 0) {\n\t\t\t\tconst calculatedExtents = calcScaleExtents($flatData, getters, activeScales);\n\t\t\t\treturn { ...calculatedExtents, ...$extents };\n\t\t\t} else {\n\t\t\t\treturn {};\n\t\t\t}\n\t\t}\n\t);\n\n\tconst xDomain_d = derived([extents_d, _xDomain], calcDomain('x'));\n\tconst yDomain_d = derived([extents_d, _yDomain], calcDomain('y'));\n\tconst zDomain_d = derived([extents_d, _zDomain], calcDomain('z'));\n\tconst rDomain_d = derived([extents_d, _rDomain], calcDomain('r'));\n\n\tconst xScale_d = derived(\n\t\t[\n\t\t\t_xScale,\n\t\t\textents_d,\n\t\t\txDomain_d,\n\t\t\t_xPadding,\n\t\t\t_xNice,\n\t\t\t_xReverse,\n\t\t\twidth_d,\n\t\t\theight_d,\n\t\t\t_xRange,\n\t\t\t_percentRange\n\t\t],\n\t\tcreateScale('x')\n\t);\n\tconst xGet_d = derived([_x, xScale_d], createGetter);\n\n\tconst yScale_d = derived(\n\t\t[\n\t\t\t_yScale,\n\t\t\textents_d,\n\t\t\tyDomain_d,\n\t\t\t_yPadding,\n\t\t\t_yNice,\n\t\t\t_yReverse,\n\t\t\twidth_d,\n\t\t\theight_d,\n\t\t\t_yRange,\n\t\t\t_percentRange\n\t\t],\n\t\tcreateScale('y')\n\t);\n\tconst yGet_d = derived([_y, yScale_d], createGetter);\n\n\tconst zScale_d = derived(\n\t\t[\n\t\t\t_zScale,\n\t\t\textents_d,\n\t\t\tzDomain_d,\n\t\t\t_zPadding,\n\t\t\t_zNice,\n\t\t\t_zReverse,\n\t\t\twidth_d,\n\t\t\theight_d,\n\t\t\t_zRange,\n\t\t\t_percentRange\n\t\t],\n\t\tcreateScale('z')\n\t);\n\tconst zGet_d = derived([_z, zScale_d], createGetter);\n\n\tconst rScale_d = derived(\n\t\t[\n\t\t\t_rScale,\n\t\t\textents_d,\n\t\t\trDomain_d,\n\t\t\t_rPadding,\n\t\t\t_rNice,\n\t\t\t_rReverse,\n\t\t\twidth_d,\n\t\t\theight_d,\n\t\t\t_rRange,\n\t\t\t_percentRange\n\t\t],\n\t\tcreateScale('r')\n\t);\n\tconst rGet_d = derived([_r, rScale_d], createGetter);\n\n\tconst xRange_d = derived([xScale_d], getRange);\n\tconst yRange_d = derived([yScale_d], getRange);\n\tconst zRange_d = derived([zScale_d], getRange);\n\tconst rRange_d = derived([rScale_d], getRange);\n\n\tconst aspectRatio_d = derived([width_d, height_d], ([$width, $height]) => {\n\t\treturn $width / $height;\n\t});\n\n\t$: context = {\n\t\tactiveGetters: activeGetters_d,\n\t\twidth: width_d,\n\t\theight: height_d,\n\t\tpercentRange: _percentRange,\n\t\taspectRatio: aspectRatio_d,\n\t\tcontainerWidth: _containerWidth,\n\t\tcontainerHeight: _containerHeight,\n\t\tx: _x,\n\t\ty: _y,\n\t\tz: _z,\n\t\tr: _r,\n\t\tcustom: _custom,\n\t\tdata: _data,\n\t\txNice: _xNice,\n\t\tyNice: _yNice,\n\t\tzNice: _zNice,\n\t\trNice: _rNice,\n\t\txReverse: _xReverse,\n\t\tyReverse: _yReverse,\n\t\tzReverse: _zReverse,\n\t\trReverse: _rReverse,\n\t\txPadding: _xPadding,\n\t\tyPadding: _yPadding,\n\t\tzPadding: _zPadding,\n\t\trPadding: _rPadding,\n\t\tpadding: padding_d,\n\t\tflatData: _flatData,\n\t\textents: extents_d,\n\t\txDomain: xDomain_d,\n\t\tyDomain: yDomain_d,\n\t\tzDomain: zDomain_d,\n\t\trDomain: rDomain_d,\n\t\txRange: xRange_d,\n\t\tyRange: yRange_d,\n\t\tzRange: zRange_d,\n\t\trRange: rRange_d,\n\t\tconfig: _config,\n\t\txScale: xScale_d,\n\t\txGet: xGet_d,\n\t\tyScale: yScale_d,\n\t\tyGet: yGet_d,\n\t\tzScale: zScale_d,\n\t\tzGet: zGet_d,\n\t\trScale: rScale_d,\n\t\trGet: rGet_d\n\t};\n\n\t$: setContext('LayerCake', context);\n\n\t$: if ($box_d && debug === true && (ssr === true || typeof window !== 'undefined')) {\n\t\t// Call this as a debounce so that it doesn't get called multiple times as these vars get filled in\n\t\tprintDebug_debounced({\n\t\t\tboundingBox: $box_d,\n\t\t\tactiveGetters: $activeGetters_d,\n\t\t\tx: config.x,\n\t\t\ty: config.y,\n\t\t\tz: config.z,\n\t\t\tr: config.r,\n\t\t\txScale: $xScale_d,\n\t\t\tyScale: $yScale_d,\n\t\t\tzScale: $zScale_d,\n\t\t\trScale: $rScale_d,\n\t\t});\n\t}\n</script>\n\n{#if ssr === true || typeof window !== 'undefined'}\n\t<div\n\t\tbind:this={element}\n\t\tclass=\"layercake-container\"\n\t\tstyle:position\n\t\tstyle:top={position === 'absolute' ? '0' : null}\n\t\tstyle:right={position === 'absolute' ? '0' : null}\n\t\tstyle:bottom={position === 'absolute' ? '0' : null}\n\t\tstyle:left={position === 'absolute' ? '0' : null}\n\t\tstyle:pointer-events={pointerEvents === false ? 'none' : null}\n\t\tbind:clientWidth={containerWidth}\n\t\tbind:clientHeight={containerHeight}\n\t>\n\t\t<slot\n\t\t\t{element}\n\t\t\twidth={$width_d}\n\t\t\theight={$height_d}\n\t\t\taspectRatio={$aspectRatio_d}\n\t\t\tcontainerWidth={$_containerWidth}\n\t\t\tcontainerHeight={$_containerHeight}\n\t\t\tactiveGetters={$activeGetters_d}\n\t\t\tpercentRange={$_percentRange}\n\t\t\tx={$_x}\n\t\t\ty={$_y}\n\t\t\tz={$_z}\n\t\t\tr={$_r}\n\t\t\tcustom={$_custom}\n\t\t\tdata={$_data}\n\t\t\txNice={$_xNice}\n\t\t\tyNice={$_yNice}\n\t\t\tzNice={$_zNice}\n\t\t\trNice={$_rNice}\n\t\t\txReverse={$_xReverse}\n\t\t\tyReverse={$_yReverse}\n\t\t\tzReverse={$_zReverse}\n\t\t\trReverse={$_rReverse}\n\t\t\txPadding={$_xPadding}\n\t\t\tyPadding={$_yPadding}\n\t\t\tzPadding={$_zPadding}\n\t\t\trPadding={$_rPadding}\n\t\t\tpadding={$padding_d}\n\t\t\tflatData={$_flatData}\n\t\t\textents={$extents_d}\n\t\t\txDomain={$xDomain_d}\n\t\t\tyDomain={$yDomain_d}\n\t\t\tzDomain={$zDomain_d}\n\t\t\trDomain={$rDomain_d}\n\t\t\txRange={$xRange_d}\n\t\t\tyRange={$yRange_d}\n\t\t\tzRange={$zRange_d}\n\t\t\trRange={$rRange_d}\n\t\t\tconfig={$_config}\n\t\t\txScale={$xScale_d}\n\t\t\txGet={$xGet_d}\n\t\t\tyScale={$yScale_d}\n\t\t\tyGet={$yGet_d}\n\t\t\tzScale={$zScale_d}\n\t\t\tzGet={$zGet_d}\n\t\t\trScale={$rScale_d}\n\t\t\trGet={$rGet_d}\n\t\t/>\n\t</div>\n{/if}\n\n<style>\n\t.layercake-container,\n\t.layercake-container :global(*) {\n\t\tbox-sizing: border-box;\n\t}\n\t.layercake-container {\n\t\twidth: 100%;\n\t\theight: 100%;\n\t}\n</style>\n",
    "<!--\n\t@component\n\tHTML layout component\n -->\n<script>\n\timport { getContext } from 'svelte';\n\n\tconst { padding } = getContext('LayerCake');\n\n\t/** @type {Element} [element] The layer's outermost `<div>` tag. Useful for bindings. */\n\texport let element = undefined;\n\n\t/** @type {Number} [zIndex] The layer's z-index. */\n\texport let zIndex = undefined;\n\n\t/** @type {Boolean} [pointerEvents] Set this to `false` to set `pointer-events: none;` on the entire layer. */\n\texport let pointerEvents = undefined;\n\n\t/** @type {String} [role] A string passed to the `aria-role` on the `<div>` tag. This is `undefined` by default but will be set by default to `'figure'` if `label`, `labelledby` or `describedby` is set. That default will be overridden by whatever is passed in. */\n\texport let role = undefined;\n\n\t/** @type {String} [label] A string passed to the `aria-label` on the `<div>` tag. */\n\texport let label = undefined;\n\n\t/** @type {String} [labelledBy] A string passed to the `aria-labelledby` on the `<div>` tag. */\n\texport let labelledBy = undefined;\n\n\t/** @type {String} [describedBy] A string passed to `aria-describedby` property on the `<div>` tag. */\n\texport let describedBy = undefined;\n\n\t$: roleVal = role || (label || labelledBy || describedBy ? 'figure' : undefined);\n</script>\n\n<div\n\tbind:this={element}\n\tclass=\"layercake-layout-html\"\n\tstyle:z-index={zIndex}\n\tstyle:pointer-events={pointerEvents === false ? 'none' : null}\n\tstyle:top={$padding.top + 'px'}\n\tstyle:right={$padding.right + 'px'}\n\tstyle:bottom={$padding.bottom + 'px'}\n\tstyle:left={$padding.left + 'px'}\n\trole={roleVal}\n\taria-label={label}\n\taria-labelledby={labelledBy}\n\taria-describedby={describedBy}\n>\n\t<slot {element}></slot>\n</div>\n\n<style>\n\tdiv,\n\tslot {\n\t\tposition: absolute;\n\t\ttop: 0;\n\t\tleft: 0;\n\t}\n</style>\n",
    "<!--\n\t@component\n\tScaled SVG layout component\n -->\n<script>\n\timport { getContext } from 'svelte';\n\n\tconst { padding } = getContext('LayerCake');\n\n\t/** @type {Element} [element] The layer's `<svg>` tag. Useful for bindings. */\n\texport let element = undefined;\n\n\t/** @type {Number} [zIndex] The layer's z-index. */\n\texport let zIndex = undefined;\n\n\t/** @type {Boolean} [pointerEvents] Set this to `false` to set `pointer-events: none;` on the entire layer. */\n\texport let pointerEvents = undefined;\n\n\t/** @type {Number} [fixedAspectRatio=1`] A number to set the aspect ratio onto the viewBox. */\n\texport let fixedAspectRatio = 1;\n\n\t/** @type {String} [viewBox=`0 0 100 ${100 / fixedAspectRatio}`] A string passed to the `viewBox` property on the `<svg>` tag. */\n\texport let viewBox = `0 0 100 ${100 / fixedAspectRatio}`;\n\t$: viewBox = `0 0 100 ${100 / fixedAspectRatio}`;\n\n\t/** @type {String} [label] A string passed to the `aria-label` on the `<svg>` tag. */\n\texport let label = undefined;\n\n\t/** @type {String} [labelledBy] A string passed to the `aria-labelledby` on the `<svg>` tag. */\n\texport let labelledBy = undefined;\n\n\t/** @type {String} [describedBy] A string passed to `aria-describedby` property on the `<svg>` tag. */\n\texport let describedBy = undefined;\n\n\t/** @type {String} [title] Shorthand to set the contents of `<title></title>` for accessibility. You can also set arbitrary HTML via the \"title\" slot but this is a convenient shorthand. If you use the \"title\" slot, this prop is ignored. */\n\texport let title = undefined;\n</script>\n\n<svg\n\tbind:this={element}\n\t{viewBox}\n\tpreserveAspectRatio=\"none\"\n\tstyle:z-index={zIndex}\n\tstyle:pointer-events={pointerEvents === false ? 'none' : null}\n\tstyle:top={$padding.top + 'px'}\n\tstyle:left={$padding.left + 'px'}\n\tstyle:width={`calc(100% - ${($padding.left + $padding.right)}px)`}\n\tstyle:height={`calc(100% - ${($padding.top + $padding.bottom)}px)`}\n\tstyle=\"right:0px; bottom:0px;\"\n\taria-label={label}\n\taria-labelledby={labelledBy}\n\taria-describedby={describedBy}\n>\n\t<slot name=\"title\">{#if title}<title>{title}</title>{/if}</slot>\n\n\t<defs>\n\t\t<slot name=\"defs\"></slot>\n\t</defs>\n\n\t<slot {element}></slot>\n</svg>\n\n<style>\n\tsvg {\n\t\tposition: absolute;\n\t\twidth: 100%;\n\t\theight: 100%;\n\t\toverflow: visible;\n\t}\n\tsvg :global(*) {\n\t\tvector-effect: non-scaling-stroke;\n\t}\n</style>\n",
    "<!--\n\t@component\n\tSVG layout component\n -->\n<script>\n\timport { getContext } from 'svelte';\n\n\t/** @type {Element} [element] The layer's `<svg>` tag. Useful for bindings. */\n\texport let element = undefined;\n\n\t/** @type {Element} [innerElement] The layer's `<g>` tag. Useful for bindings. */\n\texport let innerElement = undefined;\n\n\t/** @type {Number} [zIndex] The layer's z-index. */\n\texport let zIndex = undefined;\n\n\t/** @type {Boolean} [pointerEvents] Set this to `false` to set `pointer-events: none;` on the entire layer. */\n\texport let pointerEvents = undefined;\n\n\t/** @type {String} [viewBox] A string passed to the `viewBox` property on the `<svg>` tag. */\n\texport let viewBox = undefined;\n\n\t/** @type {String} [label] A string passed to the `aria-label` property on the `<svg>` tag. */\n\texport let label = undefined;\n\n\t/** @type {String} [labelledBy] A string passed to the `aria-labelledby property` on the `<svg>` tag. */\n\texport let labelledBy = undefined;\n\n\t/** @type {String} [describedBy] A string passed to the `aria-describedby` property on the `<svg>` tag. */\n\texport let describedBy = undefined;\n\n\t/** @type {String} [title] Shorthand to set the contents of `<title></title>` for accessibility. You can also set arbitrary HTML via the \"title\" slot but this is a convenient shorthand. If you use the \"title\" slot, this prop is ignored. */\n\texport let title = undefined;\n\n\tconst { containerWidth, containerHeight, padding } = getContext('LayerCake');\n</script>\n\n<svg\n\tbind:this={element}\n\tclass=\"layercake-layout-svg\"\n\t{viewBox}\n\twidth={$containerWidth}\n\theight={$containerHeight}\n\tstyle:z-index={zIndex}\n\tstyle:pointer-events={pointerEvents === false ? 'none' : null}\n\taria-label={label}\n\taria-labelledby={labelledBy}\n\taria-describedby={describedBy}\n>\n\t<slot name=\"title\">{#if title}<title>{title}</title>{/if}</slot>\n\n\t<defs>\n\t\t<slot name=\"defs\"></slot>\n\t</defs>\n\t<g\n\t\tbind:this={innerElement}\n\t\tclass=\"layercake-layout-svg_g\"\n\t\ttransform=\"translate({$padding.left}, {$padding.top})\">\n\t\t<slot {element}></slot>\n\t</g>\n</svg>\n\n<style>\n\tsvg {\n\t\tposition: absolute;\n\t\ttop: 0;\n\t\tleft: 0;\n\t\toverflow: visible;\n\t}\n</style>\n",
    "<script>\r\n  // CORE IMPORTS\r\n  import { setContext, onMount } from \"svelte\";\r\n  import axios from 'axios';  // Ajout du module axios\r\n  import { getMotion } from \"./utils.js\";\r\n  import { themes } from \"./config.js\";\r\n  import ONSHeader from \"./layout/ONSHeader.svelte\";\r\n  import ONSFooter from \"./layout/ONSFooter.svelte\";\r\n  import Header from \"./layout/Header.svelte\";\r\n  import Section from \"./layout/Section.svelte\";\r\n  import Media from \"./layout/Media.svelte\";\r\n  import Scroller from \"./layout/Scroller.svelte\";\r\n  import Filler from \"./layout/Filler.svelte\";\r\n  import Divider from \"./layout/Divider.svelte\";\r\n  import Toggle from \"./ui/Toggle.svelte\";\r\n  import Arrow from \"./ui/Arrow.svelte\";\r\n  import Arrow2 from \"./ui/Arrow2.svelte\";\r\n  import Em from \"./ui/Em.svelte\";\r\n  import * as d3 from \"d3\"\r\n  import { feature } from 'topojson-client';\r\n  import Legende from './layout/Legende.svelte';\r\n\r\n  // DEMO-SPECIFIC IMPORTS\r\n  import bbox from \"@turf/bbox\";\r\n  import { getData, setColors, getTopo, getBreaks, getColor } from \"./utils.js\";\r\n  import { colors, units } from \"./config.js\";\r\n  import { ScatterChart, LineChart, BarChart } from \"@onsvisual/svelte-charts\";\r\n  import { Map, MapSource, MapLayer, MapTooltip } from \"@onsvisual/svelte-maps\";\r\n    import { each } from \"svelte/internal\";\r\n\r\n  let theme = \"light\";\r\n  setContext(\"theme\", theme);\r\n  setColors(colors, theme);\r\n\r\n  let data = {};\r\n  let metadata = {};\r\n  let metadataLoaded = false;\r\n  let geojson;\r\n  let map = null;\r\n  let mapKey = \"density\";\r\n  let selected; \r\n  let animation = getMotion();\r\n  let hovered;\r\n  let mapHighlighted = [];\r\n  let isMapLoaded = false;\r\n\r\n  const threshold = 0.65;\r\n\r\n  let id = {}; // Object to hold visible section IDs of Scroller components\r\n\tlet idPrev = {}; // Object to keep track of previous IDs, to compare for changes\r\n\tonMount(() => {\r\n\t\tidPrev = {...id};\r\n\t});\r\n\r\n  let housePriceData = [];\r\n  let incomeData = [];\r\n  let ratioData = [];\r\n\r\n  const topojson = \"./data/communes-belges0 copy.json\";\r\n\r\n  const mapstyle = \"https://api.maptiler.com/maps/7a398d58-c7b0-4b18-86df-50b59985bef1/style.json?key=KxWuaRoNgdIOk76i21Fs\";\r\n  const mapbounds = {\r\n    belgium: [\r\n      [2.5, 49.5], // coin inférieur gauche : longitude, latitude\r\n      [6.4, 51.5]  // coin supérieur droit : longitude, latitude\r\n    ]\r\n  };\r\n\r\n  let initialCenter = [4.5, 50.5]; // Remplacer par les coordonnées du centre initial de votre carte\r\n  let initialZoom = 7; // Remplacer par le niveau de zoom initial de votre carte\r\n\r\n  // Sélecteur d'âge\r\n  let ageRanges = [\"Moins de 24 ans\", \"De 25 à 29 ans\", \"De 30 à 34 ans\", \"De 35 à 39 ans\", \"De 40 à 44 ans\", \"De 45 à 49 ans\", \"De 50 à 54 ans\",\"De 55 à 59 ans\",\"De 60 à 64 ans\",\"De 65 à 69 ans\",\"De 70 à 74 ans\",\"De 75 à 79 ans\",\"De 80 à 84 ans\",\"85 ans et plus\"];\r\n  let selectedAgeIndex = ageRanges.indexOf(\"De 50 à 54 ans\");\r\n  let selectedAgeRange = \"De 50 à 54 ans\"; \r\n  let ageIncomeData = [];\r\n\r\n  // Define color scale\r\n  let colorScale;\r\n\r\n  function doSelect(e) {\r\n    console.log(e);\r\n    selected = e.detail.id;\r\n    if (e.detail.feature) fitById(selected);\r\n  }\r\n\r\n  function doHover(e) {\r\n    hovered = e.detail.id;\r\n    let tooltipContent = '';\r\n    if (hovered && metadata.lookup[hovered]) {\r\n      tooltipContent = `${metadata.lookup[hovered].name} \r\n      - Prix médian pour un appartement: ${metadata.lookup[hovered].ageData[\"prix médian pour un appartement\"]} \r\n      - Prix médian pour une maison: ${metadata.lookup[hovered].ageData[\"prix médian pour une maison\"]}`\r\n    }\r\n  }\r\n\r\n\r\n  function handleDblClick(e) {\r\n    map.flyTo({center: e.lngLat, zoom: map.getZoom() - 1});\r\n  }\r\n\r\n  function resetView() {\r\n    map.flyTo({center: initialCenter, zoom: initialZoom});\r\n  }\r\n\r\n  function fitBounds(bounds) {\r\n    if (map) {\r\n      map.fitBounds(bounds, {animate: animation, padding: 30});\r\n    }\r\n  }\r\n\r\n  function fitById(id) {\r\n    if (geojson && id) {\r\n      let feature = geojson.features.find(d => d.properties.ID_4 == id);\r\n      if (feature) {\r\n        let bounds = bbox(feature.geometry);\r\n        fitBounds(bounds);\r\n      }\r\n    }\r\n  }\r\n\r\n  function zoomToCoordinates(coordinates, zoomLevel) {\r\n      if (map) {\r\n          map.flyTo({ center: coordinates, zoom: zoomLevel });\r\n      }\r\n  }\r\n\r\n  const actions = {\r\n\t\tmap: { // Actions for <Scroller/> with id=\"map\"\r\n\t\t\tmap01: () => { // Action for <section/> with data-id=\"map01\"\r\n      resetView();\r\n\t\t\t},\r\n\t\t\tmap02: () => {\r\n      // Remplacez [longitude, latitude] par les coordonnées exactes de votre commune\r\n      zoomToCoordinates([4.485, 50.730], 8);\r\n\r\n      },\r\n\r\n      map03: () => {\r\n            selectedAgeIndex = ageRanges.indexOf(\"De 25 à 29 ans\");\r\n            resetView();\r\n            handleAgeSelect();\r\n             // Ceci mettra à jour les couleurs et les données liées à la tranche d'âge\r\n        },\r\n      map04: () => {\r\n          resetView();\r\n          fitById(365);\r\n          handleAgeSelect();\r\n            // Ceci mettra à jour les couleurs et les données liées à la tranche d'âge\r\n      }\r\n    }\r\n\t};\r\n\r\n  \t// Code to run Scroller actions when new caption IDs come into view\r\n\tfunction runActions(codes = []) {\r\n\t\tcodes.forEach(code => {\r\n\t\t\tif (id[code] != idPrev[code]) {\r\n\t\t\t\tif (actions[code][id[code]]) {\r\n\t\t\t\t\tactions[code][id[code]]();\r\n\t\t\t\t}\r\n\t\t\t\tidPrev[code] = id[code];\r\n\t\t\t}\r\n\t\t});\r\n\t}\r\n\t$: id && runActions(Object.keys(actions)); // Run above code when 'id' object changes\r\n\r\n  function handleZoomOut() {\r\n    map.flyTo({center: map.getCenter(), zoom: map.getZoom() - 1});\r\n  }\r\n    \r\n\r\n  function loadSourceAndThen(callback) {\r\n      if (map.getSource('commune')) {\r\n          callback();\r\n      } else {\r\n          map.once('sourcedata', () => {\r\n              if (map.isSourceLoaded('commune')) {\r\n                  callback();\r\n              } else {\r\n                  loadSourceAndThen(callback);\r\n              }\r\n          });\r\n      }\r\n  }\r\n\r\n  function updateColors() {\r\n      if (map && metadata) {\r\n          loadSourceAndThen(() => {\r\n              metadata.array.forEach(feature => {\r\n                  if (feature.ageData[selectedAgeRange]) {\r\n                      let value = Number(feature.ageData[selectedAgeRange]);\r\n                      let colorValue = colorScale(value);\r\n                      map.setFeatureState({source: 'commune', id: feature.code}, { color: colorValue });\r\n                  }\r\n              });\r\n          });\r\n      }\r\n  }\r\n\r\n  function handleAgeSelect() {\r\n    selectedAgeRange = ageRanges[selectedAgeIndex];\r\n    updateColors();\r\n\r\n    // Trouver les revenus associés à la tranche d'âge sélectionnée\r\n    const selectedIncome = ageIncomeData.find(d => d.age === selectedAgeRange);\r\n    \r\n    if (selectedIncome) {\r\n      // Mettre à jour l'affichage (ou faire tout autre traitement nécessaire)\r\n      console.log(`Revenus par an pour ${selectedAgeRange}: ${selectedIncome.annualIncome}`);\r\n    }\r\n  }\r\n\r\n\r\n  function transformAgeRangeFormat(ageRange) {\r\n    if (ageRange.startsWith(\"De\")) {\r\n      return \"entre\" + ageRange.slice(2).replace(\"à\", \"et\");\r\n    } else if (ageRange.startsWith(\"Moins\")) {\r\n      return ageRange.charAt(0).toLowerCase() + ageRange.slice(1);\r\n    } else if (ageRange === \"85 ans et plus\") {\r\n      return \"plus de 85 ans\";\r\n    }\r\n    return ageRange;\r\n  }\r\n\r\n\r\n\r\n\r\n  let ageRangesForSentences = ageRanges.map(transformAgeRangeFormat);\r\n\r\n  function exampleFunction() {\r\n    console.log(`J'ai choisi la tranche ${ageRangesForSentences[selectedAgeIndex]}.`);\r\n  }\r\n\r\n\r\n\r\n  onMount(async () => {\r\n    // Fetch all necessary data\r\n    let geo = await getTopo(topojson, 'Communes');\r\n\r\n    geojson = geo; \r\n    geo.features.sort((a, b) => a.properties.NAME_4.localeCompare(b.properties.NAME_4));\r\n\r\n    // Collect age data\r\n    let ageData = geo.features.map(d => {\r\n      let ageProps = {};\r\n\r\n      // Loop through all properties of the feature\r\n      for (let propName in d.properties) {\r\n        // If the property starts with \"De\", \"Moins\", or \"85 ans et plus\", then it's an age range\r\n        // Also add \"prix médian pour une maison\" and \"prix médian pour un appartement\" properties\r\n        if (propName.startsWith(\"De\") || propName.startsWith(\"Moins\") || propName.startsWith(\"85 ans et plus\") || propName === \"prix médian pour une maison\" || propName === \"prix médian pour un appartement\") {\r\n          // Add the data to the ageProps object\r\n          ageProps[propName] = d.properties[propName];\r\n        }\r\n      }\r\n\r\n      return {\r\n        code: d.properties.ID_4,\r\n        name: d.properties.NAME_4,\r\n        parent: d.properties.ID_3 ? d.properties.ID_3 : null,\r\n        ageData: ageProps // Add the age data here\r\n      };\r\n    });\r\n\r\n    const incomeResponse = await axios.get('./data/Revenus moyens par age.csv');\r\n    const csvData = d3.csvParse(incomeResponse.data);\r\n    \r\n    ageIncomeData = csvData.map(row => {\r\n      return {\r\n        age: row['âge'],\r\n        annualIncome: parseFloat(row['revenus par an'].replace(/,/g, '.')),\r\n        monthlyIncome: parseFloat(row['revenus par mois'].replace(/,/g, '.').replace(/ /g, '')),\r\n        loanLowEnd: parseFloat(row['emprunt sur trente ans (bas)'].replace(/ /g, '').replace(/€/g, '').replace(/,/g, '.').trim()),\r\n        loanHighEnd: parseFloat(row['emprunt sur trente ans (haut)'].replace(/ /g, '').replace(/€/g, '').replace(/,/g, '.').trim())\r\n      };\r\n    });\r\n\r\n\r\n    let lookup = {};\r\n    ageData.forEach(d => {\r\n      lookup[d.code] = d;\r\n    });\r\n    metadata.array = ageData;\r\n    metadata.lookup = lookup;\r\n\r\n    // Define color scale\r\n    let colorThresholds = [0.05,0.2,0.3,0.4,0.5,0.6,0.7,0.8,0.9, 1,1.1,1.2,1.3,1.4,1.5,1.6,1.7,1.8,2, 3];\r\n    let colorRange =['#fef8f8', '#fad7e5', '#f1b6d3', '#e597c1', '#d479b0', '#c05ca1', '#a84192', '#8d2783', '#6e1076', '#49006a','#49006a', '#4e267b', '#543f8b', '#5b569a', '#636ca9', '#6d82b7', '#7997c5', '#88add2', '#98c3de', '#abd9e9']\r\n\r\n    colorScale = d3.scaleThreshold()\r\n      .domain(colorThresholds)\r\n      .range(colorRange); \r\n\r\n  });\r\n\r\n  handleAgeSelect();\r\n\r\n</script>\r\n\r\n\r\n\r\n\r\n\r\n\r\n<ONSHeader filled={true} center={false} />\r\n\r\n<Header bgimage=\"./img/Projet.jpg\" bgfixed={true} theme=\"light\" short={true} center={false}>\r\n  <h1><Em color=\"white\" >Les jeunes et l’immobilier :<br /> quand le rêve tourne au mirage</Em></h1>\r\n  <p class=\"text-big\" style=\"margin-top: 25px\">\r\n    <Em color=\"white\" >Face à un marché de plus en plus austère,<br />\r\n      la jeunesse voit son rêve de propriété  s'effriter<br />\r\n     et un écart se creuser entre les générations.\r\n    </Em>\r\n  </p>\r\n  <p style=\"margin-top: 20px\">\r\n   <Em color= \"white\"> 16/08/2023</Em>\r\n  </p>\r\n  <p>\r\n    <Em color= \"white\"><Toggle label=\"Animation {animation ? 'on' : 'off'}\" mono={true} bind:checked={animation} /></Em>\r\n  </p>\r\n  <div style=\"text-align: center;\">\r\n    <Arrow color=\"white\" {animation} />\r\n  </div>\r\n</Header>\r\n\r\n<Divider></Divider>\r\n\r\n<Section theme=\"light\">\r\n  <p class=\"mb\">\r\n    Devenir propriétaire de son logement : certains jeunes en rêvent, les autres ne se font plus d’illusion.  Et ce n’est pas le nouveau baromètre de la Fédération du Notariat (Fednot) qui devrait les rassurer. En 2023 <Em color=\"black\">les acheteurs de moins de 30 ans</Em> ne représentaient que 27% des transactions, contre 30% en 2018. Selon la Banque nationale de Belgique (BNB), l'âge moyen de l'achat d’un premier logement est lui en constante augmentation depuis plusieurs années. Il est passé de 30 à 36 ans depuis la fin des années 1990. \r\n  </p>  \r\n  <p class=\"mb\">\r\n    La baisse du nombre d'acheteurs jeunes et la hausse de l'âge du premier achat touchent toutes les régions et illustrent la réalité du marché immobilier belge, celle d’un accès à la propriété qui se déteriore pour les moins de 30 ans. \r\n  </p>\r\n  <p class=\"mb\">\r\n    Aujourd'hui plus qu'hier, l'accès au marché immobilier connait, en plus des inégalités sociales, l'importance grandissante des inégalités intergénérationelles. Car on ne choisit pas plus sa famille que la période économique qui nous accueille.\r\n  </p>\r\n\r\n  <p class=\"mb\">  \r\n    Pour observer cette disparité et comprendre son évolution, nous allons devoir mesurer cette accessibilité au logement. L'approche classique, utilisée notamment par la Banque nationale de Belgique (BNB), consiste à comparer l’évolution des revenus des ménages à celle des prix des logements.\r\n  </p>\r\n\r\n</Section>\r\n\r\n\r\n<Filler theme=\"lightblue\" short={true} wide={true} center={false}>\r\n  <p class=\"text-big\">\r\n    Pour mieux comprendre la situation, sélectionnez votre catégorie d’âge.\r\n    Cela va nous permettre de visualiser les différences entre les générations et les conséquences sur leur accès au logement. \r\n  </p>\r\n  <h2> Quel âge avez-vous?</h2>\r\n\r\n\r\n <p> <select class=\"tooltipdecodeurs\" bind:value=\"{selectedAgeIndex}\" on:change=\"{handleAgeSelect}\">\r\n    {#each ageRanges as ageRange, index}\r\n      <option value={index}>{ageRange}</option>\r\n    {/each}<Em color=\"black\"></Em>\r\n  </select></p>\r\n</Filler>\r\n\r\n<Filler theme=\"light\" short={true} wide={true} center={false}>\r\n  <p class=\"mb\">\r\n    Vous avez <Em color=\"black\">{ageRangesForSentences[selectedAgeIndex]}</Em>? En 2020, les Belges de cette tranche d'âge avaient un revenu annuel moyen de <Em color=\"black\">{ageIncomeData[selectedAgeIndex] ? ageIncomeData[selectedAgeIndex].annualIncome : ''} €</Em>.\r\n    Cette somme va nous servir de référence pour observer l'influence de l'âge sur l'accès à la propriété dans notre pays.  \r\n  </p>\r\n</Filler>\r\n\r\n\r\n{#if geojson}\r\n<Scroller {threshold} bind:id={id['map']}>\r\n  <div slot=\"background\">\r\n    <figure>\r\n      <div class=\"col-full height-full\">\r\n        <Map on:load={updateColors} style={mapstyle} bind:map={map} interactive={false} location={{bounds: mapbounds.belgium}}>\r\n          <MapSource id=\"commune\" type=\"geojson\" data={geojson} promoteId=\"ID_4\" maxzoom={13}>\r\n              <MapLayer id=\"commune-fill\" idKey=\"ID_4\" data={geojson.features} type=\"fill\"\r\n                        select {selected} on:select={doSelect} \r\n                        hover {hovered} on:hover={doHover} \r\n                        highlight highlighted={mapHighlighted} \r\n                        paint={{\r\n                          'fill-color': ['case', ['!=', ['feature-state', 'color'], null], ['feature-state', 'color'], 'rgba(0, 0, 0, 0.1)'],\r\n                          'fill-opacity': 0.8\r\n                        }}>\r\n                 <MapTooltip content={\r\n                  hovered && metadata.lookup[hovered]\r\n                      ? `<div class=\"tooltipdecodeurs\">\r\n                          <div class=\"titre_tt\">${metadata.lookup[hovered].name}</div>\r\n                          <div class=\"hr\" style=\"\r\n                          border-top: 1px solid #e8eaee;\"></div>\r\n                          ${metadata.lookup[hovered].ageData[\"prix médian pour une maison\"] && metadata.lookup[hovered].ageData[\"prix médian pour une maison\"] !== \"nan€\" ? \"<div>Prix médian pour une maison: \" + metadata.lookup[hovered].ageData[\"prix médian pour une maison\"] + \"</div>\" : \"\"}\r\n                          ${metadata.lookup[hovered].ageData[\"prix médian pour un appartement\"] && metadata.lookup[hovered].ageData[\"prix médian pour un appartement\"] !== \"nan€\" ? \"<div>Prix médian pour un appartement: \" + metadata.lookup[hovered].ageData[\"prix médian pour un appartement\"] + \"</div>\" : \"\"}\r\n                         </div>`\r\n                      : ''\r\n                  } />\r\n               \r\n                            \r\n                \r\n                  \r\n              </MapLayer>\r\n              <MapLayer id=\"commune-line\" type=\"line\" \r\n                        paint={{\r\n                          'line-color': ['case', ['==', ['feature-state', 'hovered'], true], 'orange', ['==', ['feature-state', 'selected'], true], 'black', ['==', ['feature-state', 'highlighted'], true], 'black', 'rgba(255,255,255,0)'],\r\n                          'line-width': 2\r\n                        }}/>\r\n          </MapSource>\r\n\r\n          <div id=\"controls-container\" style=\"position: absolute; bottom: 10px; left: 10px; background-color: white; padding: 10px; border-radius: 5px; display: flex; flex-direction: column; align-items: center;\">\r\n\r\n            <!-- Première partie: Bouton Dézoomer -->\r\n            <button class=\"dezoomer-button\" on:click={resetView}>\r\n                Dézoomer\r\n            </button>\r\n          \r\n            <!-- Diviseur -->\r\n\r\n            <!-- Diviseur -->\r\n            <div style=\"height: 1px; background-color: grey; width: 80%; margin: 5px 0;\"></div>\r\n        \r\n            <!-- Troisième partie: Informations d'abordabilité -->\r\n            <div class=\"titre_tt\" style=\"display: flex; justify-content: space-between; margin-top: 10px; width: 100%;\">\r\n                <span style=\"font-size: 1rem; color: #000;\">Plus abordable</span>\r\n                <span style=\"font-size: 1rem; color: #000;\">Moins abordable</span>\r\n            </div>\r\n            \r\n            <Legende />\r\n        \r\n          </div>\r\n        \r\n        \r\n         \r\n      </Map>\r\n      </div>\r\n    </figure>\r\n  </div>\r\n\r\n\r\n  <div slot=\"foreground\">\r\n    <section data-id=\"map01\">\r\n      <div class=\"col-medium\">\r\n        <p>\r\n          Voici une carte qui représente les communes selon leur accessibilité. Les communes <Em color=\"blue\">bleues</Em> sont les plus accessibles, à l'inverse les communes <Em color=\"pink\">roses</Em> sont trop chères pour la moyenne des Belge ayant <Em color=\"elegant\">{ageRangesForSentences[selectedAgeIndex]}</Em>.  \r\n        </p>\r\n      </div>\r\n    </section>\r\n\r\n    <section data-id=\"map01\">\r\n      <div class=\"col-medium\">\r\n        <p>\r\n          Survolez la carte pour découvrir combien coûte une maison et/ou un appartement dans votre commune en 2023.\r\n        </p>\r\n      </div>\r\n    </section>\r\n\r\n    <section data-id=\"map01\">\r\n      <div class=\"col-medium\">\r\n        <p>\r\n          En utilisant le revenu moyen de chaque tranche d'âge, nous pouvons estimer la somme que vous pourriez emprunter selon les critères actuels de prêts actuellement appliqués par les banques belges. Ce montant est ensuite comparé aux prix de l’immobilier dans chaque commune.\r\n        </p>\r\n      </div>\r\n    </section>\r\n    \r\n    \r\n    <section data-id=\"map01\">\r\n      <div class=\"col-medium\">\r\n            <p>\r\n                En déplacant ce slider vous pourrez constater les différences entre les générations:\r\n            </p>        \r\n    \r\n            <div class=\"custom-slider-container\">\r\n                <input type=\"range\" style=\"width:657px;\" min=\"0\" max=\"{ageRanges.length - 1}\" bind:value=\"{selectedAgeIndex}\" on:change=\"{handleAgeSelect}\" class=\"custom-slider\">\r\n            </div>\r\n    \r\n            <!-- Conteneur pour les informations de tranche d'âge et de revenu -->\r\n            <div class=\"info-container\" style=\"display: flex; justify-content: space-between; max-width: 80%; margin-left: auto; margin-right: auto;\">\r\n              <div class=\"info-box\">\r\n                <label for=\"ageRangeBox\"><Em color=\"black\">Tranche d'âge</Em></label>\r\n                <div id=\"ageRangeBox\" class=\"data-box\">{ageRanges[selectedAgeIndex]}</div>\r\n              </div>\r\n              <div class=\"info-box\">\r\n                <label for=\"annualIncomeBox\"><Em color=\"black\">Revenu annuel</Em></label>\r\n                <div id=\"annualIncomeBox\" class=\"data-box\">{ageIncomeData[selectedAgeIndex] ? ageIncomeData[selectedAgeIndex].annualIncome : ''} €</div>\r\n              </div>\r\n            </div> \r\n        </div>\r\n    </section>\r\n    \r\n    \r\n\r\n    <section data-id=\"map03\">\r\n      <div class=\"col-medium\">\r\n        <p>\r\n          On le remarque assez vite, au sein de la population active, ce sont les Belges âgés de 25 à 29 ans qui sont les moins bien lotis. Voici à quoi ressemble leur carte. \r\n        </p>\r\n      </div>\r\n    </section>\r\n\r\n      <section data-id=\"map02\">\r\n      <div class=\"col-medium\">\r\n        <p>\r\n          C’est dans le Brabant Wallon que les acheteurs de moins de 30 ans sont les plus rares. Ils sont passés de <Em color=\"black\">20,2%</Em> en 2018 à <Em>16,2%</Em> en 2023, estime Fednot. La faute au confinement de 2020 et à la flambée des prix des maisons avec jardins se situant proches de la capitale. \r\n        </p>\r\n      </div>\r\n    </section>\r\n\r\n    <section data-id=\"map04\">\r\n      <div class=\"col-medium\">\r\n        <p>\r\n          A l’inverse, le porte-parole de Fednot Renaud Grégoire, indique que certaines communes comme Courcelles, Sambreville, La Louvière ou Binche connaissent un taux de pénétrations plus élevé. \r\n        </p>\r\n      </div>\r\n    </section>\r\n\r\n    <section data-id=\"map04\">\r\n      <div class=\"col-medium\">\r\n        <p>\r\n          « <cite>Si les plus jeunes sont encore présents sur le marché immobilier, c'est parce qu'ils vont dans les communes les moins chères. Les moins de 30 ans posent <Em color=\"black\">le prix</Em> comme critère principal. Ils iront donc chercher des biens moins accessibles à des tarifs plus avantageux</cite> », analyse Renaud Grégoire.\r\n        </p>\r\n      </div>\r\n    </section>\r\n\r\n   \r\n  </div>\r\n\r\n\r\n\r\n</Scroller>\r\n\r\n{/if}\r\n\r\n<Section>\r\n  <p class=\"mb\">\r\n    Le revenu plus faible des moins de 30 ans joue donc un rôle majeur dans ces inégalités mais il n'explique pas, à lui seul, ce recul de l'accès à la propriété chez les jeunes. Si les écarts de revenus entre les classes d'âge ne sont pas neufs, deux éléments ont, eux, radicalement empiré la situation : <Em color=\"blue\">le prix de l'immobilier</Em> et les critères requis pour <Em color=\"green\">un emprunt hypothécaire</Em>.\r\n </p>\r\n\r\n\r\n  <p class=\"mb\">\r\n    Dans une étude publiée en juillet 2022, la BNB posait en titre d'un rapport, la question suivante: «La propriété est-elle à la portée de tous en Belgique ?» La réponse de l'institution financière était pessimiste et désignait comme première responsable, la hausse continue du prix des logements ces 50 dernières années. \r\n </p>\r\n\r\n <div class=\"flourish-embed flourish-chart\" data-src=\"visualisation/14705524\"><script src=\"https://public.flourish.studio/resources/embed.js\"></script></div>\r\n\r\n\t<p>\r\n    La BNB qui dispose de données fiables depuis près de 50 ans pose un constat clair: «<cite>Depuis 1973, les prix des logements en Belgique ont été multipliés par un facteur 15. En prenant en compte l’inflation, <strong>les prix réels ont triplé</strong></cite>» , révèle l'instution financière. Les prix réels sont ceux qui prennent en compte le revenu disponible pour acquérir un bien. Alors que depuis 1990, les prix des logements ont augmenté entre 120 et 180% selon le type de biens, les salaires n’ont augmenté que de 27 % sur la même période.</p>\r\n\t<p>\r\n   Une augmentation sur le long terme donc, mais qui jusqu'à récemment, s'équilibrait avec des taux d'intérêts historiquement bas sur les emprunts hypothécaires. Ce sont ces faibles taux qui ont permis pendant longtemps à des ménages de s'endetter et d'accéder à la propriété. La BNB le rappelle : « <cite>une diminution des taux hypothécaires entraîne un allégement de la charge de remboursement des ménages pour un montant emprunté donné. Corollairement, pour une même charge de remboursement, le montant qui peut être emprunté augmente.</cite>» Mais depuis quelques mois, la machine s'est grippée.\r\n\t</p>\r\n\r\n  <h2 class=\"section-title\">La fin des taux attractifs?</h2>\r\n\r\n\t<p>\r\n    Pour ceux qui suivent le sujet, même les moins attentifs, la nouvelle n’en est pas vraiment une. La pandémie de Covid-19 puis la guerre en Ukraine ont causé une forte inflation. Les banques centrales ont relevés leurs taux directeurs et ont fait flamber les taux hypothécaires par la même occasion. Chaque mois les chiffres battent de nouveaux records, atteignant des seuils que l’on avait pas vus depuis parfois 12 ans. \r\n  </p>\r\n\r\n  <div class=\"flourish-embed flourish-chart\" data-src=\"visualisation/13615522\"><script src=\"https://public.flourish.studio/resources/embed.js\"></script></div>\r\n  \r\n  <p>\r\n    Les nombres de nouveaux crédits ont nettement diminué en un an, de l’ordre de 30% pour les crédits à la construction et jusqu’à 45% pour les crédits de rénovation. Les particuliers sont contraints de repousser, voire de tirer un trait sur leurs projets immobiliers. Ceux qui décident toutefois de s’y risquer voient leur demande d’apport augmenter de façon conséquente.\t\r\n  </p>\r\n\r\n  \r\n\r\n\r\n</Section>\r\n\r\n\r\n<Scroller>\r\n  <div slot=\"background\" class=\"col-wide height-full\">\r\n    <figure style=\"background-image: url('./img/sara.jpg'); background-position: 15% center; background-repeat: no-repeat; background-size: 50% auto;\">\r\n      <div class=\"col-wide height-full\"></div>\r\n    </figure>\r\n  </div>\r\n\r\n  <div slot=\"foreground\">\r\n   \r\n    <section>\r\n      <div class=\"col-medium left-centered-text\">\r\n        <blockquote class=\"citation-emphase\">\r\n          «Un appartement à ce prix-là, ça n'existe pas!»\r\n          <div class=\"attribution\">- Sara, 27 ans</div>\r\n        </blockquote>\r\n      </div>\r\n    </section>\r\n  \r\n    <section>\r\n      <div class=\"col-medium left-centered-text\">\r\n        <p>\r\n          «<cite>Les sommes exigées pour un prêt sont énormes, cela m’a choquée</cite>», confirme Sara, directrice des ventes dans une agence digitale à Waterloo. A 27 ans, elle et son conjoint viennent d’acquérir un appartement à 460 000 € après des semaines de démarches.\r\n        </p>\r\n        <p>\r\n          « <cite>Depuis quelques années, je souhaitais devenir propriétaire. Je touche un salaire plus que correct et mon conjoint est patron de sa propre entreprise de jardinage. Avec l’arrivée de ma fille en 2022, il fallait que nous quittions notre location. Je ne pensais pas que cela serait si compliqué d’acheter un bien</cite>», confie la jeune maman. En cause : les taux élevés et la frilosité des banques à l’octroi de prêts.\r\n        </p>\r\n      </div>\r\n    </section>\r\n\r\n    <section>\r\n      <div class=\"col-medium left-centered-text\">\r\n        <p>\r\n          Prenons l’exemple de Sara et son conjoint.  Leur apport comprend d’une part,  46 000 € pour un prêt à taux fixe sur 25 ans avec une quotité de 90%. D’autre part, les frais de notaires et d’enregistrements portent l’apport total à environs 140 000 euros. Une somme difficile à sortir de la poche des jeunes parents. \r\n        </p>\r\n        <p>\r\n          «<cite> J’avais commencé à économiser dès mon premier salaire et je disposais déjà de 40 000€. C’était largement insuffisant et nous avons dû compter sur les donations de la famille de mon conjoint pour couvrir le reste de la somme. Mes parents sont loin d’être en difficulté mais ils n’auraient pas pu me prêter cet argent. »\r\n        </p>\r\n      </div>\r\n    </section>\r\n\r\n    <section>\r\n      <div class=\"col-medium left-centered-text\">\r\n        <p>\r\n          En effet, un tel soutien, nombreuses sont les familles à ne pas pouvoir l’offrir. Sara le confirme : « <cite>Dans la même période, une amie s’est renseignée sur l’achat d’un appartement pour elle et son bébé. En tant que mère célibataire et sans aucun apport extérieur,  la banque lui a proposé 160 000 € de prêt maximum. Un appartement avec deux chambres à ce prix-là, ça n’existe pas.</cite> » Pas un neuf, du moins. \r\n        </p>\r\n      </div>\r\n    </section>\r\n  </div>\r\n</Scroller>\r\n\r\n<Section>\r\n  <h2 class=\"section-title\">Existe-t-il un «facteur jeunesse» ?</h2>\r\n\r\n  <p class=\"mb\">\r\n  Il est vrai que les banques se montrent de plus en plus frileuse à accorder des prêts aux jeunes ménages. Fanny Bugeja-Bloch, Maitresse de conférence à l’Université Paris-Nanterre et sociolgue des inégalités analyse cette tendance: «<cite>Les moins de 30 ans sont une population fragile. Ils présentent des signaux qui rendent difficile l’accès à un logement abordable. La précarisation sur le marché, la proportion forte de chômeurs et d’inactifs ou encore les salaires irréguliers sont autant d’éléments qui freinent les banques avant d’accorder un crédit.</cite>»\r\n  </p>\r\n\r\n  <div class=\"conteneur\">\r\n      <img src=\"./img/fanny.png\" alt=\"Fanny\">\r\n  </div>\r\n\r\n\r\n  <p class=\"mb\">\r\n    Tous ces facteurs réunis finissent par plomber le capital dont dipose la jeunesse. Alors qu’en 1985, les moins de 25 ans consacraient au logement un budget deux fois plus élevés qu’un ménage de 75 ans, ce rapport était de 3 en 2015. Des efforts plus importants qui influencent le parcours de vie de ceux qui n’ont pas les ressources suffisantes, souvent héritées de leur famille. Et c'est en fin de vie que les inégalités se font alors ressentir, confirme Fanny Bugeja-Bloch: «<cite>Arrivés à l’âge de la retraite, les locataires ont une plus grande chance de connaitre la précarité car ils n’auront souvent disposé  d’aucun autre moyen de capitalisation pendant leurs années actives.</cite>»\r\n  </p>\r\n\r\n</Section>\r\n\r\n<Section>\r\n  <h2 class=\"section-title\">Les fonds publics sous pression</h2>\r\n\r\n  <p class=\"mb\">\r\n    Sans le soutien des banques et sans famille pour financer leur projet immobilier, les jeunes acheteurs se tournent alors vers les pouvoirs publics. Mais face à l’augmentation du nombre de demandes, leur capacité d'action est de plus en plus limitée. Exemple récent: le Fonds du Logement bruxellois a annoncé ce 2 mai <a href=\"https://fonds.brussels/fr/a-propos/communiques-de-presse/le-fonds-met-en-place-de-nouvelles-conditions-dacces-pour-son-credit\" target=\"_blank\">la restriction des conditions d’accès à ses crédits hypothécaires</a>, désormais réservés aux ménages dont les revenus correspondent aux barèmes du logement social, et ce jusqu’au 31 décembre 2023. \r\n  </p>\r\n\r\n\r\n  <p class=\"mb\">\r\n    Mis en place par la région bruxelloise, le Fonds propose notamment des crédits aux conditions avantageuses pour les foyers qui ne disposent pas d’assez de ressources pour contracter un prêt chez une banque. Fort de son succès , le Fonds du logement avait élargi cette possibilité à des foyers de la classe moyenne en 2015. L’institution vient donc de faire marche arrière, pour un temps du moins.\r\n  </p>\r\n\r\n  <p>\r\n    les perspectives d'une amélioration sont minces. Rien n'indique que les prix de l'immobilier devraient se maintenir à moyen termes. De leur côté, les taux devraient continuer leur ascension. La Banque centrale européenne vient de relever ses taux de 0,25 points et a annoncé poursuivre sa stratégie de lutte contre l'inflation pour quelques mois encore, entrainant avec elle l'ensemble des banques et éloignant toujours plus de jeunes foyers d’un accès à la propriété.\r\n  </p>\r\n\r\n</Section>\r\n\r\n<Section>\r\n  <h3>\r\n      Etienne Daman\r\n  </h3>\r\n</Section>\r\n\r\n<ONSFooter />\r\n\r\n\r\n\r\n\r\n\r\n\r\n<style>\r\n\r\n.dezoomer-button {\r\n    background-color: #007BFF;\r\n    color: white;\r\n    padding: 8px 15px;\r\n    border: none;\r\n    border-radius: 5px;\r\n    cursor: pointer;\r\n    font-weight: bold;\r\n    font-size: 1rem;\r\n    transition: background-color 0.3s;\r\n}\r\n\r\n.dezoomer-button:hover {\r\n    background-color: #0056b3;\r\n}\r\n\r\n\r\n.conteneur {\r\n    display: flex;\r\n    justify-content: center; /* Centrer horizontalement */\r\n    align-items: center;     /* Centrer verticalement */          /* Exemple de hauteur, à adapter selon vos besoins */\r\n}\r\n\r\n\r\n\r\n.img {\r\n    max-width: 100%;         /* Pour s'assurer que l'image ne déborde pas du conteneur */\r\n    height: auto;\r\n}\r\n\r\n\r\n.left-centered-text {\r\n    margin-left: 50%; /* Pousse le texte vers la gauche */\r\n}\r\n\r\n/* Styles specific to elements within the demo */\r\n:global(svelte-scroller-foreground) {\r\n  pointer-events: none !important;\r\n}\r\n\r\n:global(svelte-scroller-foreground section div) {\r\n  pointer-events: all !important;\r\n}\r\n\r\n\r\nselect {\r\n  max-width: 350px;\r\n}\r\n\r\n.chart {\r\n  margin-top: 45px;\r\n  width: calc(100% - 5px);\r\n}\r\n\r\n.chart-full {\r\n  margin: 0 20px;\r\n}\r\n\r\n.chart-sml {\r\n  font-size: 0.85em;\r\n}\r\n\r\n:global(.tooltipdecodeurs) { \r\n    font-family: \"Marr Sans\", \"Helvetica Neue\", Helvetica, Arial;\r\n    border-radius: 0;\r\n}\r\n:global(.tooltipdecodeurs .titre_tt) { \r\n    font-family: \"Marr Sans\", \"Helvetica Neue\", Helvetica, Arial;\r\n    font-weight: 600;\r\n    font-size: 110%;\r\n    margin: .5em 0; \r\n}\r\n.tooltipdecodeurs .gris { color: #a2a9ae; }\r\n.tooltipdecodeurs .bulle { \r\n    border-radius: 50%;\r\n    width: 1rem;\r\n    height: 1rem;\r\n    border: 0;\r\n    display: inline-block;\r\n    margin: -.3rem .5rem 0 0;\r\n    vertical-align: middle;\r\n    cursor: default; \r\n}\r\n:global(.tooltipdecodeurs div) { display: block !important; }\r\n:global(.tooltipdecodeurs.hr) { \r\n    margin-top: 1rem;\r\n    border-top: 1px solid #050505;\r\n    padding-bottom: 1rem; \r\n}\r\n.tooltipdecodeurs, .arrow:after { \r\n    background: #FFF;\r\n    border: 1px solid #E2E4E9 !important; \r\n}\r\n\r\n.citation-emphase {\r\n    font-size: 36px; /* ou toute autre taille qui vous semble appropriée */\r\n    font-style: italic; \r\n    margin: 20px 0;\r\n    padding: 10px;\r\n    border-left: 3px solid #ccc;\r\n    color: #333;\r\n    background-color: #a1cbe3;\r\n}\r\n\r\n.attribution {\r\n    font-size: 18px;\r\n    font-style: normal;\r\n    text-align: right;\r\n}\r\n\r\n/* The properties below make the media DIVs grey, for visual purposes in demo */\r\n\r\n.custom-slider {\r\n    flex-grow: 1;\r\n    margin: 0 10px;\r\n    -webkit-appearance: none;\r\n    height: 5px;\r\n    background: #ddd;\r\n    outline: none;\r\n    border-radius: 5px;\r\n}\r\n\r\n.custom-slider::-webkit-slider-thumb {\r\n    -webkit-appearance: none;\r\n    appearance: none;\r\n    width: 20px;\r\n    height: 20px;\r\n    background: #555;\r\n    cursor: pointer;\r\n    border-radius: 50%;\r\n}\r\n\r\n.custom-slider::-moz-range-thumb {\r\n    width: 20px;\r\n    height: 20px;\r\n    background: #555;\r\n    cursor: pointer;\r\n    border-radius: 50%;\r\n}\r\n.custom-slider-container {\r\n    width: 100%; /* Prend toute la largeur disponible de son parent */\r\n    padding: 10px 0; /* Ajoute un peu d'espace au-dessus et en dessous du slider */\r\n    box-sizing: border-box; /* Assurez-vous que les marges et les bordures ne débordent pas */\r\n}\r\n\r\n.info-container {\r\n  display: flex;\r\n  gap: 20px; /* Espace entre les cases */\r\n}\r\n\r\n.info-box {\r\n  display: flex;\r\n  flex-direction: column;\r\n  align-items: center;\r\n}\r\n\r\n.data-box {\r\n  border: 1px solid #ccc; /* Bordure pour la case */\r\n  padding: 5px 15px;      /* Espacement interne pour la case */\r\n  text-align: center;     /* Centrer le texte dans la case */\r\n  margin-top: 5px;        /* Espacement entre le label et la case */\r\n}\r\n\r\ncite, blockquote {\r\n    font-style: italic;\r\n}\r\n\r\n.limited-width {\r\n    max-width: 600px; /* Par exemple */\r\n}\r\n\r\n</style>\r\n",
    "<script>\n\timport { themes } from '../config.js';\n\timport { getContext } from 'svelte';\n\n  export let theme = getContext('theme');\n  export let hr = true;\n</script>\n\n<section style=\"color: {themes[theme]['text']}; background-color: {themes[theme]['background']};\">\n\t<div class=\"col-medium\">\n    {#if hr}\n    <hr style=\"color: {themes[theme]['muted']}\"/>\n    {:else}\n    <hr style=\"color: {themes[theme]['muted']}; border: none;\"/>\n    {/if}\n\t</div>\n</section>\n\n<style>\n  hr {\n    width: 75px;\n    border: none;\n    border-top: 2px solid;\n    margin: 40px auto -10px auto;\n  }\n</style>\n\n",
    "<script>\n\timport { themes } from '../config.js';\n\timport { getContext } from 'svelte';\n\n\texport let theme = getContext('theme');\n\texport let center = true;\n\texport let wide = false;\n\texport let short = false;\n</script>\n\n<style>\n\tsection {\n\t\tpadding: 36px 0;\n\t}\n\t.short {\n\t\tmin-height: 70vh;\n\t}\n</style>\n\n<section style=\"color: {themes[theme]['text']}; background-color: {themes[theme]['background']};\">\n\t<div class=\"middle\" class:center class:col-medium={!wide} class:col-wide={wide} class:height-full={!short} class:short>\n\t\t<slot></slot>\n\t</div>\n</section>",
    "<script>\n  import { themes } from '../config.js';\n\timport { getContext } from 'svelte';\n\n\texport let theme = getContext('theme');\n  export let bgimage = null;\n  export let bgcolor = null;\n  export let bgfixed = false;\n  export let center = true;\n  export let short = false;\n\n  let style = '';\n\n  if (bgimage) {\n    style += `background-image: url(${bgimage});`;\n  } else {\n    style += 'background-image: none;';\n  }\n\n  if (bgfixed) {\n    style += ' background-attachment: fixed;';\n  }\n</script>\n\n<style>\n  .short {\n    min-height: 85vh;\n  }\n  .v-padded {\n    box-sizing: border-box;\n    padding: 40px 0;\n  }\n  .header-content {\n    width: 100%;\n    max-width: 80%; /* Vous pouvez ajuster ce pourcentage selon vos besoins */\n    margin: 0 auto; /* Centrer le contenu */\n    word-wrap: break-word;\n  }\n</style>\n\n<header style=\"color: {themes[theme]['text']}; background-color: {bgcolor ? bgcolor : themes[theme]['background']}; {style}\" class:short>\n  <div class=\"v-padded col-wide middle\" style=\"position: relative\" class:short class:height-full={!short}>\n    <div class=\"header-content\">\n      <slot></slot>\n    </div>\n  </div>\n</header>\n\n\n\n\n\n",
    "<script>\n\timport { themes } from \"../config.js\";\n\timport { onMount, getContext } from \"svelte\";\n\timport { debounce } from \"debounce\";\n\n\tconst colWidths = {\n\t\tnarrow: 200,\n\t\tmedium: 300,\n\t\twide: 500,\n\t};\n\n\texport let theme = getContext(\"theme\");\n\texport let col = \"medium\";\n\texport let grid = null;\n\texport let caption = null;\n\texport let height = 200;\n\texport let gap = 12;\n\n\tlet gridClass = grid ? ` grid-${grid}` : '';\n\n\tlet nogrid = !(\"grid-gap\" in document.body.style);\n\t\n\tlet rowHeight = !Number.isNaN(height) ? height + \"px\" : height;\n\n\tlet gridGap = !Number.isNaN(gap) ? gap + \"px\" : gap;\n\n\t// The code below this point mimics CSS Grid functionality in IE 11\n\tconst minWidth = grid && colWidths[grid] ? colWidths[grid] : null;\n\n\tlet gridWidth;\n\tlet cols;\n\n\tlet el;\n\tlet divs;\n\tlet count;\n\n\tif (nogrid) {\n\t\tonMount(() => {\n\t\t\tresize();\n\t\t});\n\t}\n\n\tconst update = debounce(resize, 200);\n\n\tfunction resize() {\n\t\tif (el && !divs) {\n\t\t\tlet arr = [];\n\t\t\tlet children = el.childNodes;\n\t\t\tchildren.forEach((child) => {\n\t\t\t\tif (child.nodeName == \"DIV\") {\n\t\t\t\t\tarr.push(child);\n\t\t\t\t}\n\t\t\t});\n\t\t\tdivs = arr;\n\t\t}\n\t\tcount = divs.length;\n\t\tcols = !minWidth || gridWidth <= minWidth ? 1 : Math.floor(gridWidth / minWidth);\n\t\tmakeCols();\n\t}\n\n\tfunction makeCols() {\n\t\tlet r =\n\t\t\tMath.ceil(count / cols) > 1\n\t\t\t\t? `-ms-grid-rows: 1fr (${gap}px 1fr)[${\n\t\t\t\t\t\tMath.ceil(count / cols) - 1\n\t\t\t\t  }]; grid-template-rows: 1fr repeat(${\n\t\t\t\t\t\tMath.ceil(count / cols) - 1\n\t\t\t\t  }, ${gap}px 1fr);`\n\t\t\t\t: `-ms-grid-rows: 1fr; grid-template-rows: 1fr;`;\n\t\tlet c =\n\t\t\tcols > 1\n\t\t\t\t? `-ms-grid-columns: 1fr (${gap}px 1fr)[${\n\t\t\t\t\t\tcols - 1\n\t\t\t\t  }]; grid-template-columns: 1fr repeat(${cols - 1}, ${gap}px 1fr);`\n\t\t\t\t: \"\";\n\t\tel.style.cssText = r + c;\n\t\tdivs.forEach((div, i) => {\n\t\t\tlet col = (i % cols) * 2 + 1;\n\t\t\tlet row = Math.floor(i / cols) * 2 + 1;\n\t\t\tdiv.style.cssText = `-ms-grid-column: ${col}; -ms-grid-row: ${row}; grid-column: ${col}; grid-row: ${row}; min-height: ${rowHeight};`;\n\t\t});\n\t}\n\n\t$: nogrid && (minWidth || gridWidth) && update();\n</script>\n\n{#if nogrid}\n<figure style=\"color: {themes[theme]['text']}; background-color: {themes[theme]['background']};\">\n\t<div class=\"col-{col}\">\n\t\t<div bind:this={el} bind:clientWidth={gridWidth} class=\"grid-ms\">\n\t\t\t<slot></slot>\n\t\t</div>\n\t</div>\n</figure>\n{:else}\n<figure style=\"color: {themes[theme]['text']}; background-color: {themes[theme]['background']};\">\n\t<div class=\"col-{col}\">\n\t\t<div class=\"grid{gridClass}\" style=\"grid-gap: {gridGap}; min-height: {rowHeight}\">\n\t\t\t<slot></slot>\n\t\t</div>\n  </div>\n</figure>\n{/if}\n{#if caption}\n\t<caption style=\"color: {themes[theme]['text']}; background-color: {themes[theme]['background']};\">\n\t\t<div class=\"col-medium\">\n\t\t\t<div class=\"caption\">{@html caption}</div>\n\t\t</div>\n\t</caption>\n{/if}\n\n<style>\n\t.grid-ms {\n\t\tdisplay: grid;\n\t\tdisplay: -ms-grid;\n\t\t-ms-grid-columns: 1fr;\n\t\tgrid-template-columns: 1fr;\n\t\tmargin-top: 40px;\n\t}\n\t.grid {\n\t\tdisplay: -ms-grid;\n\t\tdisplay: grid;\n\t\tgrid-template-columns: repeat(auto-fill, 100%);\n\t\tmargin: 40px 0 0 0;\n\t}\n\t.grid-narrow {\n\t\tgrid-template-columns: repeat(auto-fill, minmax(200px, 1fr)) !important;\n\t}\n\t.grid-medium {\n\t\tgrid-template-columns: repeat(auto-fill, minmax(300px, 1fr)) !important;\n\t}\n\t.grid-wide {\n\t\tgrid-template-columns: repeat(auto-fill, minmax(500px, 1fr)) !important;\n\t}\n\t:global(.grid > div) {\n\t\tmin-height: inherit;\n\t}\n</style>\n",
    "<script>\n\timport { themes } from '../config.js';\n\timport { getContext } from 'svelte';\n\n\texport let theme = getContext('theme');\n</script>\n\n<footer style=\"color: {themes[theme]['text']}; background-color: {themes[theme]['pale']};\">\n\t<div class=\"col-wide\" data-analytics=\"footer\">\n\t\t<a href=\"https://uclouvain.be/fr/index.html\">\n\t\t\t{#if theme == 'dark'}\n\t\t\t<img\n\t\t\t\tclass=\"logo-img\"\n\t\t\t\tsrc=\"./img/ons-logo-neg-en.svg\"\n\t\t\t\talt=\"Office for National Statistics\" />\n\t\t\t{:else}\n\t\t\t<img\n\t\t\t\tclass=\"logo-img\"\n\t\t\t\tsrc=\"./img/ons-logo-black-en.svg\"\n\t\t\t\talt=\"Office for National Statistics\" />\n\t\t\t{/if}\n\t\t</a>\n\t\t<ul>\n\t\t\t<li><a href=\"https://uclouvain.be/fr/facultes/espo/comu.html\" class=\"link\" style=\"color: {themes[theme]['text']}\">COMU</a></li>\n\t\t\t<li><a href=\"https://uclouvain.be/fr/facultes/espo/comu/master-en-journalisme.html\" class=\"link\" style=\"color: {themes[theme]['text']}\">Ecole de journalisme de l'UCLouvain</a></li>\n\t\t</ul>\n\t\t<hr style=\"border-top-color: {themes[theme]['muted']}\" />\n\t\t<div class=\"license\">\n\t\t\tCe travail est un mémoire-projet mené dans le cadre du Master120 de l'école de jounralisme de l'UCLouvain\n\t\t</div>\n\t</div>\n</footer>\n\n<style>\n\tfooter {\n\t\tpadding-bottom: 72px;\n\t\tpadding-top: 36px;\n\t\tfont-size: 18px;\n\t}\n\tfooter a.link {\n\t\t-webkit-box-sizing: border-box;\n\t\tbox-sizing: border-box;\n\t\ttext-decoration: underline;\n\t\tdisplay: inline-block;\n\t}\n\tfooter a.link:hover {\n\t\ttext-decoration: none;\n\t}\n\tfooter a.link:active {\n\t\toutline: 3px solid transparent;\n\t\tbackground-color: #fd0;\n\t\t-webkit-box-shadow: 0 -2px #fd0, 0 4px #222;\n\t\tbox-shadow: 0 -2px #fd0, 0 4px #222;\n\t\tcolor: #222;\n\t\ttext-decoration: none;\n\t}\n\tfooter hr {\n\t\tmargin-bottom: 27px;\n\t\tmargin-top: 36px;\n\t\tborder: none;\n\t\tborder-top: 1px solid #777;\n\t}\n\tul {\n\t\tpadding: 0;\n\t\tmargin: 0;\n\t}\n\tli {\n\t\tmargin-right: 18px;\n\t\tdisplay: inline-block;\n\t}\n\t.logo-img {\n\t\tmargin-bottom: 27px;\n\t\twidth: 270px;\n\t}\n\t.ogl-img {\n\t\tmargin: 0 0.5rem 0.2rem 0;\n\t\twidth: 59px;\n\t\theight: 24px;\n\t\tvertical-align: middle;\n\t}\n\t.license {\n\t\tvertical-align: top;\n\t}\n\ta img:hover {\n\t\tcursor: pointer;\n\t}\n</style>",
    "<script>\n  import BarChart from '@onsvisual/svelte-charts/src/charts/BarChart.svelte';\nimport { themes } from '../config.js';\n\timport { getContext } from 'svelte';\n\n\texport let theme = getContext('theme');\n\texport let filled = false;\n\texport let center = true;\n</script>\n\n<nav style=\"border-bottom-color: {themes[theme]['muted']}; {filled ? 'background-color: ' +  themes[theme]['background'] + ';' : ''}\">\n  <div class=\"col-wide middle\" class:center>\n\t\t<a href=\"https://uclouvain.be/fr/index.html\">\n\t\t\t<picture>\n\t\t\t\t{#if theme == 'dark'}\n\t\t\t\t<img src=\"./img/ons-logo-black-en.svg\" alt=\"UCLouvain\">\n\t\t\t\t{:else if filled == true}\n\t\t\t\t<img src=\"./img/ons-logo-black-en.svg\" alt=\"UCLouvain\">\n\t\t\t\t{:else}\n\t\t\t\t<img src=\"./img/ons-logo-black-en.svg\" alt=\"UCLouvain\">\n\t\t\t\t{/if}\n\t\t\t</picture>\n\t\t</a>\n  </div>\n</nav>\n\n<style>\n\tnav {\n\t\t-webkit-box-sizing: border-box;\n\t\tbox-sizing: border-box;\n\t\tposition: relative;\n\t\theight: 46px;\n\t\tmargin-bottom: -46px;\n\t\tborder-bottom: 1px solid #777;\n\t\tz-index: 1;\n\t}\n\tpicture {\n\t\tposition: relative;\n\t\ttop: -3px;\n\t\tpadding: 0 5px;\n\t}\n\tpicture2 {\n\t\tposition: relative;\n\t\ttop: -3px;\n\t\tpadding: 0 5px;\n\t}\n\timg {\n\t\twidth: 270px;\n\t}\n\ta img:hover {\n\t\tcursor: pointer;\n\t}\n</style>",
    "<script context=\"module\">\r\n  // Based on svelte-scroller by Rich Harris\r\n  // https://github.com/sveltejs/svelte-scroller\r\n  // Patched to transpile to IE 11 and allow for split-screen view option\r\n\r\n\tconst handlers = [];\r\n\tlet manager;\r\n\r\n\tif (typeof window !== 'undefined') {\r\n\t\tconst run_all = () => handlers.forEach(fn => fn());\r\n\r\n\t\twindow.addEventListener('scroll', run_all);\r\n\t\twindow.addEventListener('resize', run_all);\r\n\t}\r\n\r\n\tif (typeof IntersectionObserver !== 'undefined') {\r\n\t\tconst map = new Map();\r\n\r\n\t\tconst observer = new IntersectionObserver((entries, observer) => {\r\n\t\t\tentries.forEach(entry => {\r\n\t\t\t\tconst update = map.get(entry.target);\r\n\t\t\t\tconst index = handlers.indexOf(update);\r\n\r\n\t\t\t\tif (entry.isIntersecting) {\r\n\t\t\t\t\tif (index === -1) handlers.push(update);\r\n\t\t\t\t} else {\r\n\t\t\t\t\tupdate();\r\n\t\t\t\t\tif (index !== -1) handlers.splice(index, 1);\r\n\t\t\t\t}\r\n\t\t\t});\r\n\t\t}, {\r\n\t\t\trootMargin: '400px 0px' // TODO why 400?\r\n\t\t});\r\n\r\n\t\tmanager = {\r\n\t\t\tadd: ({ outer, update }) => {\r\n\t\t\t\tconst { top, bottom } = outer.getBoundingClientRect();\r\n\r\n\t\t\t\tif (top < window.innerHeight && bottom > 0) handlers.push(update);\r\n\r\n\t\t\t\tmap.set(outer, update);\r\n\t\t\t\tobserver.observe(outer);\r\n\t\t\t},\r\n\r\n\t\t\tremove: ({ outer, update }) => {\r\n\t\t\t\tconst index = handlers.indexOf(update);\r\n\t\t\t\tif (index !== -1) handlers.splice(index, 1);\r\n\r\n\t\t\t\tmap.delete(outer);\r\n\t\t\t\tobserver.unobserve(outer);\r\n\t\t\t}\r\n\t\t};\r\n\t} else {\r\n\t\tmanager = {\r\n\t\t\tadd: ({ update }) => {\r\n\t\t\t\thandlers.push(update);\r\n\t\t\t},\r\n\r\n\t\t\tremove: ({ update }) => {\r\n\t\t\t\tconst index = handlers.indexOf(update);\r\n\t\t\t\tif (index !== -1) handlers.splice(index, 1);\r\n\t\t\t}\r\n\t\t};\r\n\t}\r\n</script>\r\n\r\n<script>\r\n\timport { onMount } from 'svelte';\r\n\r\n\t// config\r\n\texport let top = 0;\r\n\texport let bottom = 1;\r\n\texport let threshold = 0.5;\r\n\texport let query = 'section';\r\n\texport let parallax = false;\r\n\r\n\t// bindings\r\n\texport let index = 0;\r\n\texport let count = 0;\r\n\texport let offset = 0;\r\n\texport let progress = 0;\r\n\texport let visible = false;\r\n\texport let splitscreen = false; // Add class to allow for split screen option\r\n\texport let id = null;\r\n\r\n\tlet outer;\r\n  let bgContainer; // IE patch. Container binding to update inline style\r\n\tlet foreground;\r\n\tlet background;\r\n\tlet left;\r\n\tlet sections;\r\n\tlet wh = 0;\r\n\tlet fixed;\r\n\tlet offset_top;\r\n\tlet width = 1;\r\n\tlet height;\r\n\tlet inverted;\r\n\r\n\t$: top_px = Math.round(top * wh);\r\n\t$: bottom_px = Math.round(bottom * wh);\r\n\t$: threshold_px = Math.round(threshold * wh);\r\n\r\n\t$: (top, bottom, threshold, parallax, update());\r\n\r\n\tonMount(() => {\r\n\t\tsections = foreground.querySelectorAll(query);\r\n\t\tcount = sections.length;\r\n\r\n\t\tupdate();\r\n\r\n\t\tconst scroller = { outer, update };\r\n\r\n\t\tmanager.add(scroller);\r\n\t\treturn () => manager.remove(scroller);\r\n\t});\r\n\r\n\t// IE patch. BG container style (fixed/unfixed) set via function\r\n  function setFixed() {\r\n    if (bgContainer) {\r\n      let style = `position: ${fixed ? 'fixed' : 'absolute'}; top: 0; transform: translate(0, ${offset_top}px); width: ${width}px; z-index: ${inverted ? 3 : 1};`;\r\n      bgContainer.style.cssText = style;\r\n    }\r\n  }\r\n\r\n\tfunction update() {\r\n\t\tif (!foreground) return;\r\n\r\n\t\t// re-measure outer container\r\n\t\tconst bcr = outer.getBoundingClientRect();\r\n\t\tleft = bcr.left;\r\n\t\twidth = bcr.right - bcr.left;\r\n\r\n\t\t// determine fix state\r\n\t\tconst fg = foreground.getBoundingClientRect();\r\n\t\tconst bg = background.getBoundingClientRect();\r\n\r\n\t\tvisible = fg.top < wh && fg.bottom > 0;\r\n\r\n\t\tconst foreground_height = fg.bottom - fg.top;\r\n\t\tconst background_height = bg.bottom - bg.top;\r\n\r\n\t\tconst available_space = bottom_px - top_px;\r\n\t\tprogress = (top_px - fg.top) / (foreground_height - available_space);\r\n\r\n\t\tif (progress <= 0) {\r\n\t\t\toffset_top = 0;\r\n      if (fixed) {\r\n        fixed = false;\r\n        setFixed();\r\n      } // Non-IE specific patch to avoid setting style repeatedly\r\n\t\t} else if (progress >= 1) {\r\n\t\t\toffset_top = parallax\r\n\t\t\t\t? (foreground_height - background_height)\r\n\t\t\t\t: (foreground_height - available_space);\r\n      if (fixed) {\r\n        fixed = false;\r\n        setFixed();\r\n      }\r\n\t\t} else {\r\n\t\t\toffset_top = parallax ?\r\n\t\t\t\tMath.round(top_px - progress * (background_height - available_space)) :\r\n\t\t\t\ttop_px;\r\n      if (!fixed) {\r\n        fixed = true;\r\n        setFixed();\r\n      }\r\n\t\t}\r\n\r\n\t\tfor (index = 0; index < sections.length; index += 1) {\r\n\t\t\tconst section = sections[index];\r\n\t\t\tconst { top } = section.getBoundingClientRect();\r\n\r\n\t\t\tconst next = sections[index + 1];\r\n\t\t\tconst bottom = next ? next.getBoundingClientRect().top : fg.bottom;\r\n\r\n\t\t\toffset = (threshold_px - top) / (bottom - top);\r\n\t\t\tid = section.dataset.id ? section.dataset.id : null;\r\n\t\t\tif (bottom >= threshold_px) break;\r\n\t\t}\r\n\t}\r\n</script>\r\n\r\n<svelte:window bind:innerHeight={wh}/>\r\n\r\n<svelte-scroller-outer bind:this={outer} class:splitscreen>\r\n\t<svelte-scroller-background-container class='background-container' bind:this={bgContainer}>\r\n\t\t<svelte-scroller-background bind:this={background}>\r\n\t\t\t<slot name=\"background\"></slot>\r\n\t\t</svelte-scroller-background>\r\n\t</svelte-scroller-background-container>\r\n\r\n\t<svelte-scroller-foreground bind:this={foreground}>\r\n\t\t<slot name=\"foreground\"></slot>\r\n\t</svelte-scroller-foreground>\r\n</svelte-scroller-outer>\r\n\r\n<style>\r\n\tsvelte-scroller-outer {\r\n\t\tdisplay: block;\r\n\t\tposition: relative;\r\n\t\tmax-width: 100%;\r\n\t}\r\n\r\n\tsvelte-scroller-background {\r\n\t\tdisplay: block;\r\n\t\tposition: relative;\r\n\t\twidth: 100%;\r\n\t}\r\n\r\n\tsvelte-scroller-foreground {\r\n\t\tdisplay: block;\r\n\t\tposition: relative;\r\n\t\tz-index: 2;\r\n\t}\r\n\r\n\tsvelte-scroller-foreground::after {\r\n\t\tcontent: ' ';\r\n\t\tdisplay: block;\r\n\t\tclear: both;\r\n\t}\r\n\r\n\tsvelte-scroller-background-container {\r\n\t\tdisplay: block;\r\n\t\tposition: absolute;\r\n\t\twidth: 100%;\r\n\t\tmax-width: 100%;\r\n\t\tpointer-events: none;\r\n\t\t/* height: 100%; */\r\n\r\n\t\t/* in theory this helps prevent jumping */\r\n\t\twill-change: transform;\r\n\t\t/* -webkit-transform: translate3d(0, 0, 0);\r\n\t\t-moz-transform: translate3d(0, 0, 0);\r\n\t\ttransform: translate3d(0, 0, 0); */\r\n\t}\r\n</style>",
    "<script>\n  export let color = \"black\";\n  export let animation = true;\n\texport let center = true;\n\n  const colors = [\"black\", \"white\"];\n\n  color = colors.includes(color) ? color : \"black\";\n</script>\n\n{#if center}\n<slot></slot><br/>\n<img src=\"./img/scroll-down-{color}.svg\" class=\"arrow\" class:bounce={animation} alt=\"\" aria-hidden=\"true\"/>\n{:else}\n<img src=\"./img/scroll-down-{color}.svg\" class=\"arrow left\" class:bounce={animation} alt=\"\" aria-hidden=\"true\"/><slot></slot>\n{/if}\n\n<style>\n\t.arrow {\n\t\twidth: 56px;\n\t\theight: 56px;\n\t}\n\t.left {\n\t\tmargin-right: 10px;\n\t}\n\t.bounce {\n\t\t-webkit-animation-duration: 2s;\n\t\t        animation-duration: 2s;\n\t\t-webkit-animation-iteration-count: infinite;\n\t\t        animation-iteration-count: infinite;\n\t\t-webkit-animation-name: bounce;\n\t\t        animation-name: bounce;\n\t\t-webkit-animation-timing-function: ease;\n\t\t        animation-timing-function: ease;\n\t}\n\t@-webkit-keyframes bounce {\n\t\t0%   { -webkit-transform: translateY(10px); transform: translateY(10px); }\n\t\t30%  { -webkit-transform: translateY(-10px); transform: translateY(-10px); }\n\t\t50%  { -webkit-transform: translateY(10px); transform: translateY(10px); }\n\t\t100% { -webkit-transform: translateY(10px); transform: translateY(10px); }\n\t}\n\t@keyframes bounce {\n\t\t0%   { -webkit-transform: translateY(10px); transform: translateY(10px); }\n\t\t30%  { -webkit-transform: translateY(-10px); transform: translateY(-10px); }\n\t\t50%  { -webkit-transform: translateY(10px); transform: translateY(10px); }\n\t\t100% { -webkit-transform: translateY(10px); transform: translateY(10px); }\n\t}\n</style>",
    "<script>\n  export let color = \"black\";\n  export let animation = true;\n\texport let center = true;\n\n  const colors = [\"black\", \"white\"];\n\n  color = colors.includes(color) ? color : \"black\";\n</script>\n\n{#if center}\n<slot></slot><br/>\n<img src=\"./img/scroll-down-{color}.svg\" class=\"arrow\" class:bounce={animation} alt=\"\" aria-hidden=\"true\"/>\n{:else}\n<img src=\"./img/scroll-down-{color}.svg\" class=\"arrow left\" class:bounce={animation} alt=\"\" aria-hidden=\"true\"/><slot></slot>\n{/if}\n\n<style>\n\t.arrow {\n\t\twidth: 24px;\n\t\theight: 24px;\n\t}\n\t.left {\n\t\tmargin-right: 10px;\n\t}\n\t.bounce {\n\t\t-webkit-animation-duration: 2s;\n\t\t        animation-duration: 2s;\n\t\t-webkit-animation-iteration-count: infinite;\n\t\t        animation-iteration-count: infinite;\n\t\t-webkit-animation-name: bounce;\n\t\t        animation-name: bounce;\n\t\t-webkit-animation-timing-function: ease;\n\t\t        animation-timing-function: ease;\n\t}\n\t@-webkit-keyframes bounce {\n\t\t0%   { -webkit-transform: translateY(10px); transform: translateY(10px); }\n\t\t30%  { -webkit-transform: translateY(-10px); transform: translateY(-10px); }\n\t\t50%  { -webkit-transform: translateY(10px); transform: translateY(10px); }\n\t\t100% { -webkit-transform: translateY(10px); transform: translateY(10px); }\n\t}\n\t@keyframes bounce {\n\t\t0%   { -webkit-transform: translateY(10px); transform: translateY(10px); }\n\t\t30%  { -webkit-transform: translateY(-10px); transform: translateY(-10px); }\n\t\t50%  { -webkit-transform: translateY(10px); transform: translateY(10px); }\n\t\t100% { -webkit-transform: translateY(10px); transform: translateY(10px); }\n\t}\n</style>",
    "<script>\n  import parse from 'parse-color';\n\n  export let color = 'lightgrey';\n\texport let nowrap = true;\n\n  function textColor(rgb) {\n\t\tconst brightness = ((rgb[0] * 299) + (rgb[1] * 587) + (rgb[2] * 114)) / 1000;\n\t\treturn (brightness > 125) ? 'black' : 'white';\n\t}\n\n  let text = 'black';\n\n\t$: rgb = parse(color).rgb;\n\t\n\t$: if (rgb) {\n\t\ttext = textColor(rgb);\n\t}\n\n</script>\n\n<span class=\"em\" class:nowrap style=\"background-color: {color}; color: {text};\" role=\"presentation\">\n  <slot></slot>\n</span>\n\n<style>\n\t.em {\n\t\tpadding: 1px 4px 1px 4px;\n\t\tfont-weight: bold;\n\t}\n\t.nowrap {\n\t\twhite-space: nowrap;\n\t}\n</style>",
    "<script>\n  export let id = \"switch\";\n  export let label = \"Label\";\n  export let mono = false;\n  export let checked;\n</script>\n\n<div class=\"switch\">\n  <input bind:checked {id} type=\"checkbox\" class=\"switch-input\" tabindex=\"0\" />\n  <label for={id} class=\"switch-label\" class:mono>{label}</label>\n</div>\n\n<style>\n  .switch {\n    position: relative;\n    display: inline-block;\n  }\n  .switch-input {\n    position: absolute;\n    width: 1px;\n    height: 1px;\n    margin: -1px;\n    padding: 0;\n    overflow: hidden;\n    clip: rect(0, 0, 0, 0);\n    border: 0;\n  }\n  .switch-label::before,\n  .switch-label::after {\n    content: \"\";\n    display: block;\n    position: absolute;\n    cursor: pointer;\n  }\n  .switch-label {\n    display: block;\n    cursor: pointer;\n    margin-top: -4px;\n    margin-left: 58px;\n  }\n  .switch-label::before {\n    -webkit-box-sizing: border-box;\n    box-sizing: border-box;\n    top: 0;\n    left: 0;\n    width: 48px;\n    height: 24px;\n    -webkit-user-select: none;\n    -moz-user-select: none;\n    -ms-user-select: none;\n    user-select: none;\n    background-color: #aaa;\n    border-radius: 9999em;\n    -webkit-transition: background-color 0.25s ease;\n    -o-transition: background-color 0.25s ease;\n    transition: background-color 0.25s ease;\n  }\n  .switch-label::after {\n    top: 3px;\n    left: 3px;\n    width: 18px;\n    height: 18px;\n    border-radius: 50%;\n    background-color: #000000;\n    -webkit-transition: left 0.25s ease;\n    -o-transition: left 0.25s ease;\n    transition: left 0.25s ease;\n  }\n  .switch-input:checked + .switch-label::before {\n    background-color: rgb(32, 96, 149);\n  }\n  .switch-input:checked + .switch-label::after {\n    left: 27px;\n    top: 3px;\n  }\n\n  .mono::before {\n    border: 2px solid black;\n    background: none !important;\n  }\n</style>"
  ],
  "names": [],
  "mappings": "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"
}